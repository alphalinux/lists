.TH "Assembler on Alpha" 2
.SH NAME
Assembler on Digital Alpha
.SH DESCRIPTION
.PP
\fIAssembler-Howto\fP with a complete reference for Alpha-Linux-Opcodes.
.SH INTRODUCTION
The Alpha-RISC-Processor has 32 64-bit Integer-Registers and 32 64-bit Floating-Point-Registers. An instruction consists of a 6-bit opcode and 0 to 3 register operand fields. All instructions look like one of the following:
.PP
.BI opcode \ Ra,Rb,Rc
is part of the class Operate
.PP
.BI opcode \ Ra,lit,Rc
is part of the class Operate
.PP
.BI opcode \ Ra,disp(Rb)
is part of the class Memory
.PP
.BI opcode \ Ra,source
is part of the class Memory
.PP
.BI opcode \ Ra,destination
is part of the class Memory
.PP
.BI opcode \ disp(Rb)
is part of the class Branch
.PP
.BI opcode \ Number
is part of the class PALcode
.SH PROGRAMMING EXAMPLE
Compile the following Program with gcc -o program source.s. This source code is an adaption of the programming example for primes in Knuth's Art of Computer Programming.
.SH THE DEBUGGER: gdb
unwritten
.SH OPCODES, DIRECTIVES, PSEUDO-OPERATIONS
.BI addt \ Ra,Rb,Rc
Rc <- Ra + Rb; t = l, if longword operands (= high order 32 bits); t = q, if quadword operands
.PP
.BI addtv \ Ra,Rb,Rc
Rc <- Ra + Rb; t = l, if longword operands (= high order 32 bits); t = q, if quadword operands, signals overflow exceptions
.PP
.BI .align \ 3
Round up to specified address granularity. It makes sure that the following constant is quadword aligned.
.PP
.BI .align \ 4
It makes sure that the following constant is octaword aligned
.PP
.BI and \ Ra,Rb,Rc
Logical AND (logical product)
.PP
.BI beq \ Ra,destination
Branch if contents of register Ra is equal to zero
.PP
.BI bge \ Ra,destination
Branch if contents of register Ra is greater than or equal to zero
.PP
.BI bgt \ Ra,destination
Branch if contents of register Ra is greater than zero
.PP
.BI bic \ Ra,Rb,Rc
Logical AND with complement (A AND (NOT B))
.PP
.BI bis \ Ra,Rb,Rc
Logical OR (logical sum)
.PP
.BI blbc \ Ra,destination
Branch if bit 0 of register is clear (0)
.PP
.BI blbs \ Ra,destination
Branch if bit 0 of register is set (1)
.PP
.BI ble \ Ra,destination
Branch if contents of register Ra is less than or equal to zero
.PP
.BI blt \ Ra,destination
Branch if contents of register Ra is less than zero
.PP
.BI bne \ Ra,destination
Branch if contents of register Ra is not equal to zero
.PP
.BI br \ $31,destination
Branch unconditionally
.PP
.BI cmoveq \ Ra,Rb,Rc
Conditional move if Ra = 0 then Rc <- Rb
.PP
.BI cmovge \ Ra,Rb,Rc
Conditional move if Ra >= 0 then Rc <- Rb
.PP
.BI cmovgt \ Ra,Rb,Rc
Conditional move if Ra > 0 then Rc <- Rb
.PP
.BI cmovlbc \ Ra,Rb,Rc
Conditional move if low bit of Ra clear
.PP
.BI cmovlbs \ Ra,Rb,Rc
Conditional move if low bit of Ra set
.PP
.BI cmovle \ Ra,Rb,Rc
Conditional move if Ra <= 0 then Rc <- Rb
.PP
.BI cmovlt \ Ra,Rb,Rc
Conditional move if Ra < 0 then Rc <- Rb
.PP
.BI cmovne \ Ra,Rb,Rc
Conditional move if Ra <> 0 then Rc <- Rb 
.PP
.BI cmpeq \ Ra,Rb,Rc
Rc <- 1 if "Ra = Rb" is true, else Rc <- 0; compared signed quadword equal
.PP
.BI cmplt \ Ra,Rb,Rc
Rc <- 1 if "Ra < Rb" is true, else Rc <- 0; compared signed quadword less than
.PP
.BI cmple \ Ra,Rb,Rc
Rc <- 1 if "Ra <= Rb" is true, else Rc <- 0; compared signed quadword less than or equal
.PP
.BI cmpult \ Ra,Rb,Rc
Rc <- 1 if "Ra < Rb" is true, else Rc <- 0; compared unsigned quadword less than
.PP
.BI cmpule \ Ra,Rb,Rc
Rc <- 1 if "Ra <= Rb" is true, else Rc <- 0; compared unsigned quadword less than or equal
.PP
.BI .comm \ name,size 
Allocate named storage. If size is 8 then name is the name of an 8-byte-storage. 
.PP
.BI .data 
Switch to memory region for data 
.PP
.BI divt \ Ra,Rb,Rc
Rc <- Ra / Rc
.PP
.BI divtu \ Ra,Rb,Rc
Rc <- Ra / Rc; unsigned division.
.PP
.BI .end
Mark end of procedure introduced by .ent
.PP
.BI .ent
Mark entry of a procedure
.PP
.BI eqv \ Ra,Rb,Rc
Logical NXOR (logical euivalence, A XOR (NOT B))
.PP
.BI .frame
Describe the kind of routine
.PP
.BI .globl
Make a symbol globally accessible
.PP
.BI label: \ .ascii \ "string"
Store ASCII representation of string in successive bytes in memory.
.PP
.BI label: \ .byte \ value_list
Store specified values in successive bytes in memory from symbolic addess label onwards
.PP
.BI label: \ .long \ value_list
Store specified values in successive longwords in memory
.PP
.BI label: \ .quad \ value_list
Store specified values in successive quadwords in memory
.PP
.BI label: \ .s_floating \ value_list
Store specified values in successive memory untits
.PP
.BI label: \ .t_floating \ value_list
Store specified values in successive memory units
.PP
.BI label: \ .word \ value_list
Store specified values in successive words in memory
.PP
.BI lda \ Ra,disp(Rb)
Load Ra with effective address, i.e., Rb + disp 
.PP
.BI ldah \ Ra,disp(Rb)
Load Ra with effective address high, i.e., Rb + disp * 65536 
.PP
.BI ldgp \ $gp,0($27)
Load Unix global pointer for access to data
.PP
.BI ldq_u \ Ra,disp(Rb)
Unaligned quadword load without generating an exception
.PP
.BI ldt \ Ra,disp(Rb)
Load Ra with longword (if t=l) or with quadword (if t=q) contents found at effective address
.PP
.BI ldt_l \ Ra,disp(Rb)
Load longword (t=l) or quadword (t=q) locked
.PP
.BI mov \ lit,Ra
Put integer constant lit into register Ra
.PP
.BI mult \ Ra,Rb,Rc
Rc <- Ra * Rb;  t = l, if longword operands; t = q, if quadword operands
.PP
.BI multv \ Ra,Rb,Rc
Rc <- Ra * Rb;  t = l, if longword operands; t = q, if quadword operands; signals overflow exceptions
.PP
.BI ornot \ Ra,Rb,Rc
Logical OR with complement (A OR (NOT B))
.PP
.BI .prologue
Mark end of prologue section of procedure
.PP
.BI remt \ Ra,Rb,Rc
Rc <- (Ra - (Ra / Rb)); remainder; t = l, if longword operands; t = q, if quadword operands
.PP
.BI remtu \ Ra,Rb,Rc
Rc <- (Ra - (Ra / Rb)); remainder of an unsigned division; t = l, if longword operands; t = q, if quadword operands
.PP
.BI s4addt \ Ra,Rb,Rc
Rc <- 4 * Ra + Rb; t = l, if longword operands; t = q, if quadword operands; scaled-by-4 addition
.PP
.BI s4subt \ Ra,Rb,Rc
Rc <- 4 * Ra - Rb; t = l, if longword operands; t = q, if quadword operands; scaled-by-4 subtraction
.PP
.BI s8addt \ Ra,Rb,Rc
Rc <- 8 * Ra + Rb; t = l, if longword operands; t = q, if quadword operands; scaled-by-4 addition
.PP
.BI s8subt \ Ra,Rb,Rc
Rc <- 8 * Ra - Rb; t = l, if longword operands; t = q, if quadword operands; scaled-by-8 subtraction
.PP
.BI .set
Specify assembler behavior
.PP
.BI sra \ Ra,Rb,Rc
Shift right arithmetic. Division of a signed (!) operator by 2. For unsigned use sxl.
.PP
.BI stt \ Ra,disp(Rb) \ \ \ or \ \ \ stt \ Ra,source
Store longword (if t=l) or quadword (if t=q) contents in Ra at effective address
.PP
.BI stt_c \ Ra,disp(Rb)
Store longword (t=l) or quadword (t=q) conditional
.PP
.BI stq_u \ Ra,disp(Rb)
Unaligned quadword store without generating an exception
.PP
.BI subt \ Ra,Rb,Rc
Rc <- Ra - Rb; t = l, if longword operands; t = q, if quadword operands
.PP
.BI subtv \ Ra,Rb,Rc
Rc <- Ra - Rb; t = l, if longword operands; t = q, if quadword operands; signals overflow exception
.PP
.BI sxl \ Ra,Rb,Rc
shift right (if x = r, srl) logical, shift left (if x = l, sll) logical 
.PP
.BI .text
Switch to memory region for instructions
.PP
.BI umulh \ Ra,Rb,Rc
Unsigned quadword multiplication high
.PP
.BI xor \ Ra,Rb,Rc
Logical XOR (logical difference)
.SH Copyright
Rudolf Seemann: a9500918@unet.univie.ac.at


