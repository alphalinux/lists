<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: [Fwd: Alpha SMP problem]</H1> 
	
<!-- received="Wed Nov 08 23:20:26 2000" -->
<!-- isoreceived="20001109072026" -->
<!-- sent="Wed, 08 Nov 2000 15:32:23 -0500" -->
<!-- isosent="20001108203223" -->
<!-- name="Jeff Sturm" -->
<!-- email="jeff.sturm@appnet.com" -->
<!-- subject="Re: [Fwd: Alpha SMP problem]" -->
<!-- id="3A09B857.79DB9BB2@appnet.com" -->
<!-- inreplyto="3A095A5D.A5C7900D@scs.ch" -->
<STRONG>Subject: </STRONG>Re: [Fwd: Alpha SMP problem]<BR>
<STRONG>From: </STRONG>Jeff Sturm (<EM>jeff.sturm@appnet.com</EM>)<BR>
<STRONG>Date: </STRONG>Wed Nov  8 12:32:23 2000
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#203">[ date ]</A>
<A HREF="index.shtml#203">[ thread ]</A>
<A HREF="subject.shtml#203">[ subject ]</A>
<A HREF="author.shtml#203">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0204.shtml">peterw871: "Re: SCSI 68 vs 80 pin - any issue on Alpha ?"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0202.shtml">James Fowler: "Re: modutils"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0198.shtml">Reto Baettig: "[Fwd: Alpha SMP problem]"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0206.shtml">Reto Baettig: "Re: [Fwd: Alpha SMP problem]"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0198.shtml">Jeff Sturm: "Re: [Fwd: Alpha SMP problem]"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
Reto Baettig wrote:
<BR>
<EM>&gt; The strange thing is that a single instance of the program runs just
</EM><BR>
<EM>&gt; fine. When I start the program a second time, I get segfaults and/or
</EM><BR>
<EM>&gt; stuck threads.
</EM><BR>
<P>Actually I would expect stuck threads:
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem.delete = 1;
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (mem.delete)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Th_Delay(1);
<BR>
<P>mem.delete must be declared `volatile' to prevent that from looping forever. 
<BR>
However as long you didn't compile with optimizations you can probably get by.
<BR>
<P>Also, consider that the &quot;Free&quot; thread is writing:
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem-&gt;buf = NULL;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem-&gt;delete = 0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ...loop...
<BR>
<P>while the &quot;DoTest&quot; thread is reading:
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ...loop....
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(mem.buf == NULL);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(mem.delete == 0);
<BR>
<P>The writes to mem-&gt;buf and mem-&gt;delete may be reordered by the compiler and/or
<BR>
CPU.  Despite the memory barrier, DoTest can see a non-NULL mem.buf even after
<BR>
it sees (mem.delete == 0).
<BR>
<P>To get guaranteed sequential behavior, you need to use `volatile' and a few more
<BR>
membar's, e.g.:
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem-&gt;buf = NULL;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem-&gt;delete = 0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb();
<BR>
<P>and:
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem.buf = malloc(len);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(mem.buf != NULL);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb();
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;th_req[Th_Num]++;
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mem.delete = 1;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb();
<BR>
<P>or save yourself the trouble and use a mutex instead.
<BR>
<P>Honestly I didn't try your program, but I wouldn't consider blaming the kernel
<BR>
or glibc as long as your code is incorrect.
<BR>
<P><PRE>
--
Jeff Sturm
jeff.sturm@commerceone.com
<P><P><P>_______________________________________________
Axp-list mailing list
Axp-list@redhat.com
https://listman.redhat.com/mailman/listinfo/axp-list
</PRE>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0204.shtml">peterw871: "Re: SCSI 68 vs 80 pin - any issue on Alpha ?"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0202.shtml">James Fowler: "Re: modutils"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0198.shtml">Reto Baettig: "[Fwd: Alpha SMP problem]"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0206.shtml">Reto Baettig: "Re: [Fwd: Alpha SMP problem]"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0198.shtml">Jeff Sturm: "Re: [Fwd: Alpha SMP problem]"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Fri Dec  1 08:00:07 2000 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
