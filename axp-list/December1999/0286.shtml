<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: SV: suggestions for udb</H1> 
	
<!-- received="Thu Dec 09 11:31:58 1999" -->
<!-- isoreceived="19991209193158" -->
<!-- sent="Thu, 9 Dec 1999 08:35:02 +0000 (GMT)" -->
<!-- isosent="19991209083502" -->
<!-- name="Shane Sturrock" -->
<!-- email="sss@nova.bru.ed.ac.uk" -->
<!-- subject="Re: SV: suggestions for udb" -->
<!-- id="Pine.LNX.4.10.9912090812040.22580-100000@nova.bru.ed.ac.uk" -->
<!-- inreplyto="384EC03A.B6DCFD84@paralleldata.com" -->
<STRONG>Subject: </STRONG>Re: SV: suggestions for udb<BR>
<STRONG>From: </STRONG>Shane Sturrock (<EM>sss@nova.bru.ed.ac.uk</EM>)<BR>
<STRONG>Date: </STRONG>Thu Dec  9 00:35:02 1999
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#286">[ date ]</A>
<A HREF="index.shtml#286">[ thread ]</A>
<A HREF="subject.shtml#286">[ subject ]</A>
<A HREF="author.shtml#286">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0287.shtml">Designer Seven: "2.2.14pre12 - 0MB"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0285.shtml">Shane Sturrock: "Re: SV: suggestions for udb"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0280.shtml">Wes Bauske: "Re: SV: suggestions for udb"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0297.shtml">Wes Bauske: "Re: SV: suggestions for udb"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0280.shtml">Shane Sturrock: "Re: SV: suggestions for udb"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
On Wed, 8 Dec 1999, Wes Bauske wrote:
<BR>
<P><EM>&gt; &gt; There sure are, for the same algorithm coded for the 64 bit architecture
</EM><BR>
<EM>&gt; &gt; we are now hitting 182 million on the 164LX compared with the 9 million
</EM><BR>
<EM>&gt; &gt; the celeron 400 gets. 
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; Would you care to elaborate on your performance change
</EM><BR>
<EM>&gt; vs your last note?
</EM><BR>
<P>OK, I'll expand a little on it.
<BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; The only way I know of to improve code performance by over
</EM><BR>
<EM>&gt; 7x (25-&gt;182) is to either drastically alter the algorithm
</EM><BR>
<P>Typically in my field this is the approach taken, the Smith and Waterman
<BR>
algorithm is described as an exhaustive dynamic programming algorithm and
<BR>
is considered too time consuming to run on general purpose processors.
<BR>
The usual way to deal with this is to run it on supercomputers (we used to
<BR>
use a MasPar with 16384 processing elements) or to use some form of custom
<BR>
chip in the form of dedicated silicon or a programmable gate array chip.
<BR>
<P>For workstation use the usual method is to use an heuristic method which
<BR>
disposes of a large portion of the database by a simple prefilter scan
<BR>
which can be performed very quickly.  These generally rely on doing word
<BR>
matches and sequences are scored based on the number of word matches they
<BR>
have, then a Smith and Waterman algorithm is used on any likely matches,
<BR>
typically 1-10% of the database.  This method while fast runs the risk of
<BR>
losing significant hits thus it would be preferable to have a full Smith
<BR>
and Waterman algorithm but the cost of hardware puts limits on this.
<BR>
<P><EM>&gt; or to compare optimized compiles against non-optimized
</EM><BR>
<EM>&gt; compiles. The first is valid but then you compare apples 
</EM><BR>
<EM>&gt; and oranges. The second bears little resemblance to a valid
</EM><BR>
<EM>&gt; performance comparison.
</EM><BR>
<P>Indeed.  However, there is a third way.
<BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; If you have a third way, I'd like to hear about it.
</EM><BR>
<P>Micro-parallelism which uses the 64 bit word to do multiple integer
<BR>
operations on several less than 64 bit numbers.  By using this we can do
<BR>
the full Smith and Waterman algorithm at the sort of speeds others are
<BR>
getting from the cut down heuristic algorithms and not suffer the
<BR>
sensitivity penalties that they do.  It's really neat stuff!
<BR>
<P>Here is a reference that covers the topic pretty thoroughly:
<BR>
<P><A HREF="http://www.supercomp.org/sc95/proceedings/549_LCAR/SC95.HTM">http://www.supercomp.org/sc95/proceedings/549_LCAR/SC95.HTM</A>
<BR>
<P>This was the work that got us interested.
<BR>
<P>Shane
<BR>
<P><PRE>
-- 
To unsubscribe: send e-mail to axp-list-request@redhat.com with
'unsubscribe' as the subject.  Do not send it to axp-list@redhat.com
</PRE>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0287.shtml">Designer Seven: "2.2.14pre12 - 0MB"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0285.shtml">Shane Sturrock: "Re: SV: suggestions for udb"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0280.shtml">Wes Bauske: "Re: SV: suggestions for udb"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0297.shtml">Wes Bauske: "Re: SV: suggestions for udb"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0280.shtml">Shane Sturrock: "Re: SV: suggestions for udb"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Mon Jan  3 11:15:09 2000 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
