<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: SV: suggestions for udb</H1> 
	
<!-- received="Fri Dec 10 14:16:57 1999" -->
<!-- isoreceived="19991210221657" -->
<!-- sent="Fri, 10 Dec 1999 08:31:33 +0000 (GMT)" -->
<!-- isosent="19991210083133" -->
<!-- name="Shane Sturrock" -->
<!-- email="sss@nova.bru.ed.ac.uk" -->
<!-- subject="Re: SV: suggestions for udb" -->
<!-- id="Pine.LNX.4.10.9912100822490.23469-100000@nova.bru.ed.ac.uk" -->
<!-- inreplyto="38500B07.6145DD@paralleldata.com" -->
<STRONG>Subject: </STRONG>Re: SV: suggestions for udb<BR>
<STRONG>From: </STRONG>Shane Sturrock (<EM>sss@nova.bru.ed.ac.uk</EM>)<BR>
<STRONG>Date: </STRONG>Fri Dec 10 00:31:33 1999
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#314">[ date ]</A>
<A HREF="index.shtml#314">[ thread ]</A>
<A HREF="subject.shtml#314">[ subject ]</A>
<A HREF="author.shtml#314">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0315.shtml">Joachim De Beule: "Unidentified subject!"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0313.shtml">Christian Iseli: "Re: Oops... that last mesg was meant for Richard Henderson"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0297.shtml">Wes Bauske: "Re: SV: suggestions for udb"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0467.shtml">Ken Hansen: "Re: SV: suggestions for udb"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0297.shtml">Shane Sturrock: "Re: SV: suggestions for udb"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
On Thu, 9 Dec 1999, Wes Bauske wrote:
<BR>
<P><EM>&gt; Interesting. Similar to what graphics folks do. Given
</EM><BR>
<P>Yup.  I am rather hoping the chip manufacturers will see fit to slot
<BR>
more suitable instructions into the processors in the future, particularly
<BR>
as 128 and wider processors appear.
<BR>
<P><EM>&gt; that sort of implementation, the Intel should actually
</EM><BR>
<EM>&gt; run very fast since it has those MMX instructions for
</EM><BR>
<EM>&gt; just that sort of problem. It would be similar to what
</EM><BR>
<EM>&gt; the paper talks about for the I860. You could build a
</EM><BR>
<EM>&gt; simple asm macro instead of what the authors do for the 
</EM><BR>
<EM>&gt; i860.
</EM><BR>
<P>The performance figures for the 64 bit integer speedups were way above
<BR>
what FP/MMX type instructions gained though, typically in the 20% bracket
<BR>
whereas 64 bit integer microparallelism sees 700% in our case.
<BR>
<P><EM>&gt; Not sure if I'd bother though unless it was really
</EM><BR>
<EM>&gt; fast and #ifdef'd with equivalent C.
</EM><BR>
<P>No, the advantage of our code is that it is perfectly normal and legal C,
<BR>
it compiles on any 64 bit architecture.  Very important.
<BR>
<P><EM>&gt; Still, I see no reason why one couldn't put two 15 bit words
</EM><BR>
<EM>&gt; in a 32 bit word on an intel and improve it's performance
</EM><BR>
<EM>&gt; as is done with 4 15 bit words on Alpha. Also, one could 
</EM><BR>
<EM>&gt; implement the FP version of the algorithm and cut the
</EM><BR>
<EM>&gt; Alpha's lead that way too. 
</EM><BR>
<P>In order to do the folding and extraction of words you end up roughly
<BR>
doubling the number of instructions, this means that 15 bits on a 32 bit
<BR>
architecture would be at best the same speed as doing 32 bit work assuming 
<BR>
a single integer pipeline.  Now the latest x86s have more than that but
<BR>
lack of registers would most likely negate any effects.  My experience
<BR>
with normal 32 bit code suggests that the Alpha is 2x as fast clock for
<BR>
clock than an x86 (PII core).  PIII and Athlon may make a little
<BR>
difference but not enough to bring them to parity with a 164 Alpha for our
<BR>
work.  So, it might be possible to get an Intel to go twice as quick as it
<BR>
currently does by microparallelism but that would only bring it close to
<BR>
the non-micropll code on Alpha so we don't consider it worth the effort.
<BR>
64 bit processors give you a much bigger bang for the buck.
<BR>
&nbsp;
<BR>
<EM>&gt; &gt; One question though. Why are you comparing only 15 bits
</EM><BR>
<EM>&gt; at a time? Is this something intrinsic to the problem?
</EM><BR>
<EM>&gt; Why not directly use 32 or 64 bits??
</EM><BR>
<P>You need to have a mask bit which allows you to identify where each word
<BR>
ends and to allow you to detect when a word overflows.  If you don't,
<BR>
well, it can get tricky :-)
<BR>
<P>Shane
<BR>
<P><PRE>
-- 
To unsubscribe: send e-mail to axp-list-request@redhat.com with
'unsubscribe' as the subject.  Do not send it to axp-list@redhat.com
</PRE>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0315.shtml">Joachim De Beule: "Unidentified subject!"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0313.shtml">Christian Iseli: "Re: Oops... that last mesg was meant for Richard Henderson"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0297.shtml">Wes Bauske: "Re: SV: suggestions for udb"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0467.shtml">Ken Hansen: "Re: SV: suggestions for udb"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0297.shtml">Shane Sturrock: "Re: SV: suggestions for udb"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Mon Jan  3 11:15:09 2000 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
