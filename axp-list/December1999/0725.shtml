<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> new problem: can't see vmdump.h?</H1> 
	
<!-- received="Wed Dec 22 18:47:40 1999" -->
<!-- isoreceived="19991223024740" -->
<!-- sent="Thu, 23 Dec 1999 16:46:16 -0700 (MST)" -->
<!-- isosent="19991223234616" -->
<!-- name="Brian Hall" -->
<!-- email="brianw.hall@compaq.com" -->
<!-- subject="new problem: can't see vmdump.h?" -->
<!-- id="XFMail.19991223164616.brianw.hall@compaq.com" -->
<!-- inreplyto="Pine.SGI.3.94.991221120253.366688K-100000@awesome.engr.sgi.com" -->
<STRONG>Subject: </STRONG>new problem: can't see vmdump.h?<BR>
<STRONG>From: </STRONG>Brian Hall (<EM>brianw.hall@compaq.com</EM>)<BR>
<STRONG>Date: </STRONG>Thu Dec 23 15:46:16 1999
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#725">[ date ]</A>
<A HREF="index.shtml#725">[ thread ]</A>
<A HREF="subject.shtml#725">[ subject ]</A>
<A HREF="author.shtml#725">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0726.shtml">Paul B. Brown: "Re: UP2000 and RH6.1"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0724.shtml">Iwao Makino: "Re: UP2000 and RH6.1"</A>
<!-- nextthread="start" -->
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
OK, I've got the following code in __dump_execute:
<BR>
<P>__dump_execute(struct file *dump_file, char *panic_str,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct pt_regs *regs, int dump_level, int dump_compress_pages)
<BR>
{
<BR>
dump_here:
<BR>
<P>( some code skipped here)
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* For Alpha, save the Program Counter and Stack Pointer */
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dump_header.dh_esp = __asm__(&quot;$30&quot;);         /* get stack pointer   */
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dump_header.dh_eip = &amp;&amp;dump_here;            /* get Program Counter */
<BR>
<P>Sound OK?
<BR>
<P>I removed the cmd directory temporarily from the top level Makefile so I could
<BR>
do a test build (lots of work todo there!). Had to fix a type in sd.c, but the
<BR>
compile died completely when it reached arch/alpha/kernel/vmdump.c, apparently
<BR>
because it couldn't see vmdump.h. Huh? File does exist as requested in
<BR>
include/linux; adding an include line with the explicit path to it didn't help.
<BR>
Any idea why this fails to see the include? /usr/src/linux is actually
<BR>
symlinked to a mounted NFS share that holds the kernel source; doesn't seem
<BR>
like that would be the problem since the rest of the kernel was building fine.
<BR>
/usr/include/linux points to ../src/linux/include/linux/.
<BR>
<P>On 21-Dec-1999 Matt Robinson wrote:
<BR>
<EM>&gt; On Thu, 23 Dec 1999, Brian Hall wrote:
</EM><BR>
<EM>&gt;|&gt;Well, it's not clear to me how to get the PC and RA of interest off the
</EM><BR>
<EM>&gt;|&gt;stack
</EM><BR>
<EM>&gt;|&gt;when we are in the vmdump functions. We could retreive the RA from register
</EM><BR>
<EM>&gt;|&gt;26
</EM><BR>
<EM>&gt;|&gt;in the panic() function itself, and pass that to the dump_execute function.
</EM><BR>
<EM>&gt;|&gt;Then the dump code could at least tell where panic was called from. Is this
</EM><BR>
<EM>&gt;|&gt;sufficient, or at least a start?
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; In the __dump_execute() function, just save the PC into the right
</EM><BR>
<EM>&gt; registers, and that'll be enough.  You don't have to fill the pt_regs
</EM><BR>
<EM>&gt; structure.
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; The big keys are the stack pointer and the PC for that process within
</EM><BR>
<EM>&gt; the __dump_execute() function.  Save the stack pointer into
</EM><BR>
<EM>&gt; dump_header.dh_esp, and the PC into dump_header.dh_eip.  That's all
</EM><BR>
<EM>&gt; 'lcrash' should need in order to figure out the stack trace of the
</EM><BR>
<EM>&gt; failing process (for now).  Having the RA is nice, but not entirely
</EM><BR>
<EM>&gt; necessary.
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; I should have named dh_esp and dh_eip into something like dh_sp and
</EM><BR>
<EM>&gt; dh_pc, for simplicity's sake.  Next revision ...
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; --Matt
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt;|&gt;On 18-Dec-1999 Brian Hall wrote:
</EM><BR>
<EM>&gt;|&gt;&gt; Okay, after some research, I think I figured out how to get at the needed
</EM><BR>
<EM>&gt;|&gt;&gt; Alpha registers:
</EM><BR>
<EM>&gt;|&gt;&gt; 
</EM><BR>
<EM>&gt;|&gt;&gt; register unsigned long fptr __asm__(&quot;$15&quot;); /* get frame pointer? */
</EM><BR>
<EM>&gt;|&gt;&gt; register unsigned long sptr __asm__(&quot;$30&quot;); /* get stack pointer? */
</EM><BR>
<EM>&gt;|&gt;&gt; 
</EM><BR>
<EM>&gt;|&gt;&gt; Now, my understanding of the problem is that I need to go back two frames
</EM><BR>
<EM>&gt;|&gt;&gt; on
</EM><BR>
<EM>&gt;|&gt;&gt; the stack to get the PC of interest, and three for the RA of interest. How
</EM><BR>
<EM>&gt;|&gt;&gt; do
</EM><BR>
<EM>&gt;|&gt;&gt; I
</EM><BR>
<EM>&gt;|&gt;&gt; do this? I haven't had much luck yet trying to figure out how to navigate
</EM><BR>
<EM>&gt;|&gt;&gt; the
</EM><BR>
<EM>&gt;|&gt;&gt; kernel stack. I see the pt_regs structure, but I'm not exactly sure how to
</EM><BR>
<EM>&gt;|&gt;&gt; figure the frame size, since that can vary with each frame.
</EM><BR>
<EM>&gt;|&gt;&gt; 
</EM><BR>
<EM>&gt;|&gt;&gt; On 13-Dec-1999 Matt Robinson wrote:
</EM><BR>
<EM>&gt;|&gt;&gt;&gt; The problem is from panic(), you don't have the registers, so you
</EM><BR>
<EM>&gt;|&gt;&gt;&gt; need to grab them.  That way the 'lcrash' code has a point to start
</EM><BR>
<EM>&gt;|&gt;&gt;&gt; with as far as the failing process is concerned.  Hence the &quot;if (regs)&quot;
</EM><BR>
<EM>&gt;|&gt;&gt;&gt; stuff.
</EM><BR>
<EM>&gt;|&gt;
</EM><BR>
<EM>&gt;|&gt;--
</EM><BR>
<EM>&gt;|&gt;Brian Hall &lt;brianw.hall@compaq.com&gt;
</EM><BR>
<EM>&gt;|&gt;Linux Consultant
</EM><BR>
<P><P><PRE>
--
Brian Hall &lt;brianw.hall@compaq.com&gt;
Linux Consultant
<P>-- 
To unsubscribe: send e-mail to axp-list-request@redhat.com with
'unsubscribe' as the subject.  Do not send it to axp-list@redhat.com
</PRE>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0726.shtml">Paul B. Brown: "Re: UP2000 and RH6.1"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0724.shtml">Iwao Makino: "Re: UP2000 and RH6.1"</A>
<!-- nextthread="start" -->
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Mon Jan  3 11:15:11 2000 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
