<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> RE: FFTW performance</H1> 
	
<!-- received="Wed Apr 11 00:32:26 2001" -->
<!-- isoreceived="20010411073226" -->
<!-- sent="Tue, 10 Apr 2001 19:42:35 -0400" -->
<!-- isosent="20010410234235" -->
<!-- name="Tom Morris" -->
<!-- email="Tom.Morris@api-networks.com" -->
<!-- subject="RE: FFTW performance" -->
<!-- id="051DFF3BBA73D3119A5800A0C95BD021C3A4D9@barracuda.alpha-processor.com" -->
<!-- inreplyto="FFTW performance" -->
<STRONG>Subject: </STRONG>RE: FFTW performance<BR>
<STRONG>From: </STRONG>Tom Morris (<EM>Tom.Morris@api-networks.com</EM>)<BR>
<STRONG>Date: </STRONG>Tue Apr 10 16:42:35 2001
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#19">[ date ]</A>
<A HREF="index.shtml#19">[ thread ]</A>
<A HREF="subject.shtml#19">[ subject ]</A>
<A HREF="author.shtml#19">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0020.shtml">KirkE@paccessglobal.com: "RE: Request For Comment: Low-Cost Alpha Platform ACTION!"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0018.shtml">T. Daniel Crawford: "Performance Optimization Web Page"</A>
<!-- nextthread="start" -->
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
On Tuesday, April 10, 2001 3:33 AM, chu@tes-mail.jpl.nasa.gov
<BR>
[SMTP:chu@tes-mail.jpl.nasa.gov] wrote:
<BR>
<P><EM>&gt;  Are there any special flags (besides -fast) that will generate better
</EM><BR>
code?
<BR>
<P>To answer the last question first, since it seems to have attracted the
<BR>
most comment, ccc -fast will typically get you 90% of the way there and
<BR>
is probably all you need for most applications.
<BR>
<P><EM>&gt; The CPU benchmark that we use
</EM><BR>
<EM>&gt; most often is running FFTs.  More specifically, we use the FFTW package
</EM><BR>
<EM>&gt; from MIT.  
</EM><BR>
<P>Even more specifically, I understand from a private conversation with
<BR>
Eugene that their benchmark uses a single size of 131072 points for
<BR>
the FFT test.  As it happens, this is in a region where FFTW seems
<BR>
to choose an algorithm which is particularly sub-optimal for Alpha.
<BR>
<P>If you look at <A HREF="http://www.fftw.org/benchfft/results/alpha467.html">http://www.fftw.org/benchfft/results/alpha467.html</A>
<BR>
you can actually see that this behavior goes back all the way
<BR>
to EV56 and FFTW2.0  For powers of two at 16K points and above,
<BR>
CWP significantly outperforms that algorithm that FFTW is using.
<BR>
<P>Running benchFFT with FFTW2.1.3 and CXML 4.0.0 shows
<BR>
FFTW to be 2-5 times faster for powers of 2 between 2 and 64.
<BR>
Between 128 and 4K both packages are within 10-15% of each
<BR>
other.  FFTW is 30% faster at 8K.  At 16k and above, CXML is
<BR>
1.5 to 5 times faster than FFTW.  Specifically at 128K, CXML
<BR>
is 2.6 times faster than FFTW.  Comparing the performance
<BR>
for CXML and CWP, I'd guess that CXML actually uses the
<BR>
CWP algorithm in this region.
<BR>
<P>For non-powers of 2, or at least those that are tested by 
<BR>
benchfft, FFTW is consistently better than most other
<BR>
algorithms/packages and CXML is very erratic in its
<BR>
performance.
<BR>
<P>This isn't really the kind of problem that will be helped by
<BR>
compiler switches or even better compilers.  This is
<BR>
largely a data flow problem and the data access pattern
<BR>
is something intrinsic to the algorithm.  The compiler's
<BR>
going to have little luck fixing it up after the fact to try
<BR>
and match the machine's architecture.
<BR>
<P>I haven't looked at what FFTW is doing specifically, but
<BR>
it's obviously not making effective use of the high speed
<BR>
DDR cache on the 833 MHz Slot B module.
<BR>
<P>If FFTs are important to you, it's worth having a look at
<BR>
the different algorithms available, because they have
<BR>
different strengths and weaknesses and VERY different
<BR>
performance characteristics.
<BR>
<P>For Eugene's application at a size of 128K points, it
<BR>
looks like CXML or CWP is the way to go.  At smaller
<BR>
sizes, FFTW is pretty hard to beat.
<BR>
<P>Tom
<BR>
<P><P><P><P>_______________________________________________
<BR>
Axp-list mailing list
<BR>
Axp-list@redhat.com
<BR>
https://listman.redhat.com/mailman/listinfo/axp-list
<BR>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0020.shtml">KirkE@paccessglobal.com: "RE: Request For Comment: Low-Cost Alpha Platform ACTION!"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0018.shtml">T. Daniel Crawford: "Performance Optimization Web Page"</A>
<!-- nextthread="start" -->
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Sat May  5 06:18:12 2001 PDT <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
