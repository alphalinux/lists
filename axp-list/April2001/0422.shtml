<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: gcc 2.96 optimization bug on RedHat7.0/alpha</H1> 
	
<!-- received="Thu Apr 19 01:29:15 2001" -->
<!-- isoreceived="20010419082915" -->
<!-- sent="Wed, 18 Apr 2001 20:28:51 -0400" -->
<!-- isosent="20010419002851" -->
<!-- name="Uncle George" -->
<!-- email="gatgul@voicenet.com" -->
<!-- subject="Re: gcc 2.96 optimization bug on RedHat7.0/alpha" -->
<!-- id="3ADE3143.E8F86D97@voicenet.com" -->
<!-- inreplyto="20010418153340.A28974@ellpspace.math.ualberta.ca" -->
<STRONG>Subject: </STRONG>Re: gcc 2.96 optimization bug on RedHat7.0/alpha<BR>
<STRONG>From: </STRONG>Uncle George (<EM>gatgul@voicenet.com</EM>)<BR>
<STRONG>Date: </STRONG>Wed Apr 18 17:28:51 2001
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#422">[ date ]</A>
<A HREF="index.shtml#422">[ thread ]</A>
<A HREF="subject.shtml#422">[ subject ]</A>
<A HREF="author.shtml#422">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0423.shtml">KirkE@paccessglobal.com: "DEC 21143x based network card list"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0421.shtml">P.TURLAIS: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0417.shtml">Michal Jaegermann: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0419.shtml">jeff.sturm@appnet.com: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0417.shtml">Uncle George: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
Michal Jaegermann wrote:
<BR>
<P><EM>&gt; On Wed, Apr 18, 2001 at 06:18:13PM -0400, Uncle George wrote:
</EM><BR>
<EM>&gt; &gt; Its not my code segment, and from my experience a union might be better.
</EM><BR>
<EM>&gt; &gt; although from this discourse not safe either.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;  the code as stated should:
</EM><BR>
<EM>&gt; &gt;     1) take address of x
</EM><BR>
<EM>&gt; &gt;     2) make into int ptr
</EM><BR>
<EM>&gt; &gt;     3) add 1 to ptr  ( value of 4 bec its an int ptr )
</EM><BR>
<EM>&gt; &gt;     4) fetch integer from the address as calculated.
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; Well, yes, you translated the code from C to English.  But the
</EM><BR>
<EM>&gt; question really was what you expect that it will happen after these
</EM><BR>
<EM>&gt; operations and what kind of a _meaning_ you ascribe to that.
</EM><BR>
<P>What happens after is also irrelevant, as there is no point on continuing
<BR>
with the routine if steps 1-4 of the equation dont happen.  i ascribe no
<BR>
particular meaning to either I0, or I1. Just need to realize that the results
<BR>
are different between optimizations.
<BR>
<P><EM>&gt;
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; &gt; It should not matter if at x there is 8 bytes of a double, as that
</EM><BR>
<EM>&gt; &gt; distinction is superflous to the equation.
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; But if you think that some consistent results should come from this
</EM><BR>
<EM>&gt; program then you assume that such &quot;pointer puns&quot; have a well defined
</EM><BR>
<EM>&gt; semantics.  I do not recall that they ever had.
</EM><BR>
<EM>&gt;
</EM><BR>
<P>I hope that pointer arith is well defined. and should yield the same results
<BR>
with -O0 -O1 -O2 and so on.
<BR>
<P><EM>&gt;
</EM><BR>
<EM>&gt; &gt; anyway the segment was taken from a floor() function (akin to glibc:
</EM><BR>
<EM>&gt; &gt; ./sysdeps/ieee754/dbl-64/s_floor.c).
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; This may even work for some particular platform and some particular
</EM><BR>
<EM>&gt; compiler, so it may be ok in internals of libraries, but it does
</EM><BR>
<EM>&gt; not mean that it can be copied elsewhere.
</EM><BR>
<EM>&gt;
</EM><BR>
<P>yup, ergo the majic statement to disassemble the double to 2 ints is a macro.
<BR>
But again, irrelevant to talk about the various other architectures. I have
<BR>
only posted a CPP'd snippet of the problem code to demonstrate the erroneous
<BR>
results, as per gnu c bug reporting info.
<BR>
<P><P>Whats a pointer pun?
<BR>
<P>/gat
<BR>
<P><!doctype html public "-//w3c//dtd html 4.0 transitional//en">

Michal Jaegermann wrote:
<blockquote TYPE=CITE>On Wed, Apr 18, 2001 at 06:18:13PM -0400, Uncle George
wrote:
<br>> Its not my code segment, and from my experience a union might be
better.
<br>> although from this discourse not safe either.
<br>>
<br>>&nbsp; the code as stated should:
<br>>&nbsp;&nbsp;&nbsp;&nbsp; 1) take address of x
<br>>&nbsp;&nbsp;&nbsp;&nbsp; 2) make into int ptr
<br>>&nbsp;&nbsp;&nbsp;&nbsp; 3) add 1 to ptr&nbsp; ( value of 4 bec its
an int ptr )
<br>>&nbsp;&nbsp;&nbsp;&nbsp; 4) fetch integer from the address as calculated.
<p>Well, yes, you translated the code from C to English.&nbsp; But the
<br>question really was what you expect that it will happen after these
<br>operations and what kind of a _meaning_ you ascribe to that.</blockquote>
What happens after is also irrelevant, as there is no point on continuing
with the routine if steps 1-4 of the equation dont happen.&nbsp; i ascribe
no particular meaning to either I0, or I1. Just need to realize that the
results are different between optimizations.
<blockquote TYPE=CITE>&nbsp;
<p>> It should not matter if at x there is 8 bytes of a double, as that
<br>> distinction is superflous to the equation.
<p>But if you think that some consistent results should come from this
<br>program then you assume that such "pointer puns" have a well defined
<br>semantics.&nbsp; I do not recall that they ever had.
<br>&nbsp;</blockquote>
I hope that pointer arith is well defined. and should yield the same results
with -O0 -O1 -O2 and so on.
<blockquote TYPE=CITE>&nbsp;
<br>> anyway the segment was taken from a floor() function (akin to glibc:
<br>> ./sysdeps/ieee754/dbl-64/s_floor.c).
<p>This may even work for some particular platform and some particular
<br>compiler, so it may be ok in internals of libraries, but it does
<br>not mean that it can be copied elsewhere.
<br><a href="https://listman.redhat.com/mailman/listinfo/axp-list"></a>&nbsp;</blockquote>
yup, ergo the majic statement to disassemble the double to 2 ints is a
macro. But again, irrelevant to talk about the various other architectures.
I have only posted a CPP'd snippet of the problem code to demonstrate the
erroneous results, as per gnu c bug reporting info.
<br>&nbsp;
<p>Whats a pointer pun?
<p>/gat





_______________________________________________
Axp-list mailing list
Axp-list@redhat.com
https://listman.redhat.com/mailman/listinfo/axp-list
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0423.shtml">KirkE@paccessglobal.com: "DEC 21143x based network card list"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0421.shtml">P.TURLAIS: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0417.shtml">Michal Jaegermann: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0419.shtml">jeff.sturm@appnet.com: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0417.shtml">Uncle George: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Sat May  5 06:18:13 2001 PDT <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
