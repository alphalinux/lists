<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: gcc 2.96 optimization bug on RedHat7.0/alpha</H1> 
	
<!-- received="Wed Apr 18 23:07:27 2001" -->
<!-- isoreceived="20010419060727" -->
<!-- sent="Wed, 18 Apr 2001 15:50:04 -0500" -->
<!-- isosent="20010418205004" -->
<!-- name="Chris Eleveld (Sector 7 Group)" -->
<!-- email="Chris_Eleveld@sector7.com" -->
<!-- subject="Re: gcc 2.96 optimization bug on RedHat7.0/alpha" -->
<!-- id="20010418155004.U30165@taarna.sector7.com" -->
<!-- inreplyto="3ADE12A4.777D7877@voicenet.com" -->
<STRONG>Subject: </STRONG>Re: gcc 2.96 optimization bug on RedHat7.0/alpha<BR>
<STRONG>From: </STRONG>Chris Eleveld (Sector 7 Group) (<EM>Chris_Eleveld@sector7.com</EM>)<BR>
<STRONG>Date: </STRONG>Wed Apr 18 13:50:04 2001
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#420">[ date ]</A>
<A HREF="index.shtml#420">[ thread ]</A>
<A HREF="subject.shtml#420">[ subject ]</A>
<A HREF="author.shtml#420">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0421.shtml">P.TURLAIS: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0419.shtml">jeff.sturm@appnet.com: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0416.shtml">Uncle George: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0409.shtml">Hoover, Tony: "RE: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0416.shtml">Chris Eleveld (Sector 7 Group): "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This brings up the thing that disturbs me most about the original
<BR>
code fragment.  It assumes a double is in IEEE format and little endian.
<BR>
both dangerous assumptions.  I do not believe the C standard specifies
<BR>
IEEE floating point semantics or types for math.  The alpha in particular
<BR>
has and may be optimized for other floating point representations.  I'm
<BR>
sure the alpha isn't the only system to do things differently.
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Just my 2 cents from the porting business,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chris
<BR>
<P>On Wed, Apr 18, 2001 at 06:18:13PM -0400, Uncle George wrote:
<BR>
<EM>&gt; Its not my code segment, and from my experience a union might be better.
</EM><BR>
<EM>&gt; although from this discourse not safe either.
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt;  the code as stated should:
</EM><BR>
<EM>&gt;     1) take address of x
</EM><BR>
<EM>&gt;     2) make into int ptr
</EM><BR>
<EM>&gt;     3) add 1 to ptr  ( value of 4 bec its an int ptr )
</EM><BR>
<EM>&gt;     4) fetch integer from the address as calculated.
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; It should not matter if at x there is 8 bytes of a double, as that
</EM><BR>
<EM>&gt; distinction is superflous to the equation.
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; anyway the segment was taken from a floor() function (akin to glibc:
</EM><BR>
<EM>&gt; ./sysdeps/ieee754/dbl-64/s_floor.c).
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; static double huge = 1.0e300;
</EM><BR>
<EM>&gt; #endif
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; #ifdef __STDC__
</EM><BR>
<EM>&gt;         double __floor(double x)
</EM><BR>
<EM>&gt; #else
</EM><BR>
<EM>&gt;         double __floor(x)
</EM><BR>
<EM>&gt;         double x;
</EM><BR>
<EM>&gt; #endif
</EM><BR>
<EM>&gt; {
</EM><BR>
<EM>&gt;         int32_t i0,i1,j0;
</EM><BR>
<EM>&gt;         u_int32_t i,j;
</EM><BR>
<EM>&gt;         EXTRACT_WORDS(i0,i1,x);        &lt;== Majic happens behind this macro
</EM><BR>
<EM>&gt; which I suppose is tailored for each system
</EM><BR>
<EM>&gt;         j0 = ((i0&gt;&gt;20)&amp;0x7ff)-0x3ff;
</EM><BR>
<EM>&gt;:
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; Michal Jaegermann wrote:
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; &gt; On Wed, Apr 18, 2001 at 11:13:59AM -0400, Uncle George wrote:
</EM><BR>
<EM>&gt; &gt; &gt; Any compiler that does not produce the correct code has a bug - baring
</EM><BR>
<EM>&gt; &gt; &gt; any error messages.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Indeed, but you should also add &quot;from a correct source&quot; for clarity.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; &gt; I suppose one has to deceide if an error message should be produced
</EM><BR>
<EM>&gt; &gt; &gt; OR proper code should be produced.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Can you explain what you intended to see from your example and why?
</EM><BR>
<EM>&gt; &gt; I was looking at that code yesterday and scratching my head.  I am
</EM><BR>
<EM>&gt; &gt; still not absolutely sure what the _real_ meaning was supposed to be.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; If you want overlay different types you have 'union' construct for
</EM><BR>
<EM>&gt; &gt; that.  Playing loose with pointers was not guaranteed to work ever.
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; _______________________________________________
</EM><BR>
<EM>&gt; Axp-list mailing list
</EM><BR>
<EM>&gt; Axp-list@redhat.com
</EM><BR>
<EM>&gt; https://listman.redhat.com/mailman/listinfo/axp-list
</EM><BR>
<P><P><P>_______________________________________________
<BR>
Axp-list mailing list
<BR>
Axp-list@redhat.com
<BR>
https://listman.redhat.com/mailman/listinfo/axp-list
<BR>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0421.shtml">P.TURLAIS: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0419.shtml">jeff.sturm@appnet.com: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0416.shtml">Uncle George: "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0409.shtml">Hoover, Tony: "RE: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0416.shtml">Chris Eleveld (Sector 7 Group): "Re: gcc 2.96 optimization bug on RedHat7.0/alpha"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Sat May  5 06:18:13 2001 PDT <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
