<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: memory address space on alpha Linux</H1> 
	
<!-- received="Sat Jan 06 23:49:44 2001" -->
<!-- isoreceived="20010107074944" -->
<!-- sent="Sat, 06 Jan 2001 17:49:10 -0500" -->
<!-- isosent="20010106224910" -->
<!-- name="Uncle George" -->
<!-- email="gatgul@voicenet.com" -->
<!-- subject="Re: memory address space on alpha Linux" -->
<!-- id="3A57A0E6.AE3FA0FC@voicenet.com" -->
<!-- charset="x-user-defined" -->
<!-- inreplyto="Pine.LNX.4.30.0101061658300.15020-100000@orion.chem.vt.edu" -->
<STRONG>Subject: </STRONG>Re: memory address space on alpha Linux<BR>
<STRONG>From: </STRONG>Uncle George (<EM>gatgul@voicenet.com</EM>)<BR>
<STRONG>Date: </STRONG>Sat Jan  6 14:49:10 2001
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#73">[ date ]</A>
<A HREF="index.shtml#73">[ thread ]</A>
<A HREF="subject.shtml#73">[ subject ]</A>
<A HREF="author.shtml#73">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0074.shtml">Richard Henderson: "Re: memory address space on alpha Linux"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0072.shtml">T. Daniel Crawford: "memory address space on alpha Linux"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0072.shtml">T. Daniel Crawford: "memory address space on alpha Linux"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0074.shtml">Richard Henderson: "Re: memory address space on alpha Linux"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0072.shtml">Uncle George: "Re: memory address space on alpha Linux"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
Looks are deceiving, the addr is a mmap() address, rather than from a traditional
<BR>
malloc pool. I think anything over 128k is mmapped, so that it can be unmapped
<BR>
without the fragmenting the malloc pool with large memory holes
<BR>
/gat
<BR>
btw by printing in hex u may see the allocation better.
<BR>
btw#2 malloc allocation is on a per 'C' library basis. I dont know if ccc (
<BR>
true64 c compiler ) uses glibc or their own.
<BR>
<P><P>&quot;T. Daniel Crawford&quot; wrote:
<BR>
<P><EM>&gt; Hi, all,
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; I'm having trouble with the way the memory allocation system works in C
</EM><BR>
<EM>&gt; as implemented under alpha Linux.  Here's some simple code:
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; ------------------------------------------------------------------------------
</EM><BR>
<EM>&gt; #include &lt;stdio.h&gt;
</EM><BR>
<EM>&gt; #include &lt;stdlib.h&gt;
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; int main(void)
</EM><BR>
<EM>&gt; {
</EM><BR>
<EM>&gt;   long int *n, size;
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt;   printf(&quot;%d %d %d\n&quot;, sizeof(int), sizeof(long int), sizeof(long long
</EM><BR>
<EM>&gt; int));
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt;   size = 1;
</EM><BR>
<EM>&gt;   n = (long int *) malloc(size * sizeof(int));
</EM><BR>
<EM>&gt;   printf(&quot;size = %d; n = %ld\n&quot;, size, n);
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt;   size = 1000;
</EM><BR>
<EM>&gt;   n = (long int *) malloc(size * sizeof(int));
</EM><BR>
<EM>&gt;   printf(&quot;size = %d; n = %ld\n&quot;, size, n);
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt;   size = 100000;
</EM><BR>
<EM>&gt;   n = (long int *) malloc(size * sizeof(int));
</EM><BR>
<EM>&gt;   printf(&quot;size = %d; n = %ld\n&quot;, size, n);
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt;   return 0;
</EM><BR>
<EM>&gt; }
</EM><BR>
<EM>&gt; ------------------------------------------------------------------------------
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; The output from this program using the Compaq C compiler, ccc, is:
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; 4 8 8
</EM><BR>
<EM>&gt; size = 1; n = 4832890112
</EM><BR>
<EM>&gt; size = 1000; n = 4832890608
</EM><BR>
<EM>&gt; size = 100000; n = 2199023427600
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; Note that I get nearly the same results using GNU C.
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; Now, if, instead, I run this under Compaq's Tru64 UNIX, I get:
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; 4 8 8
</EM><BR>
<EM>&gt; size = 1; n = 5368717568
</EM><BR>
<EM>&gt; size = 1000; n = 5368721408
</EM><BR>
<EM>&gt; size = 100000; n = 5368765536
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; For the large-block allocation, on alpha Linux the address is off in the
</EM><BR>
<EM>&gt; middle of nowhere (from my perspective) while on alpha Tru64 both the small-
</EM><BR>
<EM>&gt; and large-block allocations end up in approximately the same region of
</EM><BR>
<EM>&gt; address space.
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; My questions: (1) I am misinterpreting my results? (2) If not, why does
</EM><BR>
<EM>&gt; this happen?
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; Thanks in advance for any help!
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; -Daniel
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; --
</EM><BR>
<EM>&gt; T. Daniel Crawford                           Department of Chemistry
</EM><BR>
<EM>&gt; crawdad@vt.edu                                    Virginia Tech
</EM><BR>
<EM>&gt; www.chem.vt.edu/chem-dept/crawford    Voice: 540-231-7760  FAX: 540-231-3255
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; _______________________________________________
</EM><BR>
<EM>&gt; Axp-list mailing list
</EM><BR>
<EM>&gt; Axp-list@redhat.com
</EM><BR>
<EM>&gt; https://listman.redhat.com/mailman/listinfo/axp-list
</EM><BR>
<P><P><P>_______________________________________________
<BR>
Axp-list mailing list
<BR>
Axp-list@redhat.com
<BR>
https://listman.redhat.com/mailman/listinfo/axp-list
<BR>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0074.shtml">Richard Henderson: "Re: memory address space on alpha Linux"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0072.shtml">T. Daniel Crawford: "memory address space on alpha Linux"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0072.shtml">T. Daniel Crawford: "memory address space on alpha Linux"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0074.shtml">Richard Henderson: "Re: memory address space on alpha Linux"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0072.shtml">Uncle George: "Re: memory address space on alpha Linux"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Sat Mar  3 12:54:54 2001 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
