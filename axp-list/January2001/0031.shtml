<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: stopping ./configure from choking on use of ccc/cxx (LONG)</H1> 
	
<!-- received="Thu Jan 04 13:44:48 2001" -->
<!-- isoreceived="20010104214448" -->
<!-- sent="Wed, 03 Jan 2001 23:50:37 -0800" -->
<!-- isosent="20010104075037" -->
<!-- name="Alan Young" -->
<!-- email="ayoung@teleport.com" -->
<!-- subject="Re: stopping ./configure from choking on use of ccc/cxx (LONG)" -->
<!-- id="3A542B4D.1FC96EB7@teleport.com" -->
<!-- inreplyto="3A5377D0.E018D46E@teleport.com" -->
<STRONG>Subject: </STRONG>Re: stopping ./configure from choking on use of ccc/cxx (LONG)<BR>
<STRONG>From: </STRONG>Alan Young (<EM>ayoung@teleport.com</EM>)<BR>
<STRONG>Date: </STRONG>Wed Jan  3 23:50:37 2001
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#31">[ date ]</A>
<A HREF="index.shtml#31">[ thread ]</A>
<A HREF="subject.shtml#31">[ subject ]</A>
<A HREF="author.shtml#31">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0032.shtml">Adam C Powell IV: "Re: stopping ./configure from choking on use of ccc/cxx (LONG)"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0030.shtml">Phil: "Re: valid boot block not present"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0025.shtml">Alan Young: "Re: stopping ./configure from choking on use of ccc/cxx"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0032.shtml">Adam C Powell IV: "Re: stopping ./configure from choking on use of ccc/cxx (LONG)"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0025.shtml">Alan Young: "Re: stopping ./configure from choking on use of ccc/cxx (LONG)"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
Alan Young wrote:
<BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; &gt; Something strange is going on in configure.  There's something in
</EM><BR>
<EM>&gt; &gt; &gt; configure that says if I'm not gcc, then don't create a shared lib.
</EM><BR>
<EM>&gt; &gt; &gt; It gets worse if you specify CFLAGS in the environment, then it
</EM><BR>
<EM>&gt; &gt; &gt; doesn't work at all (gcc pukes on my -arch switch).  It seems to
</EM><BR>
<EM>&gt; &gt; &gt; be calling /usr/bin/gcc directly.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; You see. The whole idea of libtool is to use &quot;it&quot; to call your compiler
</EM><BR>
<EM>&gt; &gt; so your makefile remains independant of such things and thus more
</EM><BR>
<EM>&gt; &gt; flexiable.
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; Personally, I've never been real thrilled with libtool.
</EM><BR>
<P>I think I've pinned down what is causing shared libraries to be turned off.
<BR>
I found a message in the configure log - &quot;checking if libtool supports
<BR>
shared libraries...&quot;  which is getting &quot;no&quot; printed after it.  It did some
<BR>
spelunking into configure and found that this test is actually coming out
<BR>
of ltconfig and not configure.  By adding a --debug switch to the command
<BR>
line that is built in configure to call ltconfig, I was able to generate
<BR>
a trace and I think I see what might is going wrong.  In ltconfig there
<BR>
is a flag called &quot;can_build_shared&quot;.  This is set by a number of 
<BR>
different conditions.  It seems we are hitting the default in a test that
<BR>
is trying to figure out what switch the compiler needs to produce position
<BR>
independent code (PIC).  Specifically, it's this test:
<BR>
<P>echo $ac_n &quot;checking for $compiler option to produce PIC... $ac_c&quot; 1&gt;&amp;6
<BR>
pic_flag=
<BR>
special_shlib_compile_flags=
<BR>
wl=
<BR>
link_static_flag=
<BR>
no_builtin_flag=
<BR>
<P>if test &quot;$with_gcc&quot; = yes; then
<BR>
&nbsp;&nbsp;wl='-Wl,'
<BR>
&nbsp;&nbsp;link_static_flag='-static'
<BR>
<P>&nbsp;&nbsp;case &quot;$host_os&quot; in
<BR>
&nbsp;&nbsp;beos* | irix5* | irix6* | osf3* | osf4* | osf5*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# PIC is the default for these OSes.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;aix*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# Below there is a dirty hack to force normal static linking with -ldl
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# The problem is because libdl dynamically linked with both libc and
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# libC (AIX C++ library), which obviously doesn't included in libraries
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# list by gcc. This cause undefined symbols with -static flags.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# This hack allows C programs to be linked with &quot;-static -ldl&quot;, but
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# we not sure about C++ programs.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag=&quot;$link_static_flag ${wl}-lC&quot;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;cygwin* | mingw* | os2*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# We can build DLLs from non-PIC.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;amigaos*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# FIXME: we need at least 68020 code to build shared libraries, but
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# adding the `-m68020' flag to GCC prevents building anything better,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# like `-m68040'.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-m68020 -resident32 -malways-restore-a4'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;sysv4*MP*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if test -d /usr/nec; then
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pic_flag=-Kconform_pic
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fi
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-fPIC'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;esac
<BR>
else
<BR>
&nbsp;&nbsp;# PORTME Check for PIC flags for the system compiler.
<BR>
&nbsp;&nbsp;case &quot;$host_os&quot; in
<BR>
&nbsp;&nbsp;aix3* | aix4*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# All AIX code is PIC.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-bnso -bI:/lib/syscalls.exp'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;hpux9* | hpux10* | hpux11*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# Is there a better link_static_flag that works with the bundled CC?
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wl='-Wl,'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag=&quot;${wl}-a ${wl}archive&quot;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='+Z'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;irix5* | irix6*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wl='-Wl,'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-non_shared'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# PIC (with -KPIC) is the default.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;cygwin* | mingw* | os2*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# We can build DLLs from non-PIC.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;osf3* | osf4* | osf5*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# All OSF/1 code is PIC.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wl='-Wl,'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-non_shared'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;sco3.2v5*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-Kpic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-dn'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;special_shlib_compile_flags='-belf'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;solaris*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-KPIC'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-Bstatic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wl='-Wl,'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;sunos4*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-PIC'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-Bstatic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wl='-Qoption ld '
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-KPIC'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-Bstatic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;wl='-Wl,'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;uts4*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-pic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-Bstatic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;sysv4*MP*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if test -d /usr/nec ;then
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-Kconform_pic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_static_flag='-Bstatic'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fi
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;can_build_shared=no
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# I added this next echo - Alan 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;echo &quot;ACK... we hit a default case.  can_build_shared=no!&quot;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;esac
<BR>
fi
<BR>
<P><P>As you can see since CCC is not GCC, we fall into the else half of the
<BR>
if.  And since there's no Alpha Linux test in the else statement's case,
<BR>
we hit the default which sets can_build_shared to NO.  Peter's trick
<BR>
works because it fools the script into thinking we are compiling with 
<BR>
GCC when we really are not and the program logic goes to the true part
<BR>
of the if.
<BR>
<P>I'd like to propose that we add a case to ltconfig that will check for
<BR>
Compaq C (ccc).  Unfortunately, this will mean everyone will need to
<BR>
update their libtools and people will have to update packages with the
<BR>
new libtool until the maintainers catch up, but I think this will solve
<BR>
the problem.  In the above case, I suggest this additional code be
<BR>
added before the default case so the code looks like:
<BR>
<P>&nbsp;&nbsp;linux-gnu)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# Should really test the cpu type here too, but for now we'll assume
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# that ccc is only on the Alpha platform.  If a non Alpha compiler  
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;# called ccc comes along, well, then, this will need to be fixed.    
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case &quot;$compiler&quot; in
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ccc)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# according to the ccc manpage -shared is the default
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# do we need -call_shared too?
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pic_flag='-shared'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;can_build_shared=yes
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gcc)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo &quot;Huh? how did we get here? - shared test&quot; 1&gt;&amp;6
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;can_build_shared=yes
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;can_build_shared=no
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo &quot;Could not identify your Linux compiler - shared libraries will
<BR>
not be built&quot; 1&gt;&amp;6
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;esac   
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;     
<BR>
<P>&nbsp;&nbsp;*)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;can_build_shared=no
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;echo &quot;Could not identify your compiler - shared libraries will not be
<BR>
built&quot; 1&gt;&amp;6
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;;;
<BR>
&nbsp;&nbsp;esac
<BR>
fi
<BR>
<P>I tested this with a modified ltconfig from libtool 1.3.5 and SDL 1.1.6.  I
<BR>
called
<BR>
configure with &quot;CC=ccc CFLAGS='-fast -arch ev56' ./configure&quot;.  In my configure
<BR>
log
<BR>
I have the shared messages as &quot;yes&quot; and make build a shared library without my
<BR>
intervention.  So it seems to work for me.  Please beat on it and see what it
<BR>
does for you.  If this looks good, then I think we can approach the libtool
<BR>
maintainer and see if we can get this included in the next version.
<BR>
<P>Alan
<BR>
<P><P><P>_______________________________________________
<BR>
Axp-list mailing list
<BR>
Axp-list@redhat.com
<BR>
https://listman.redhat.com/mailman/listinfo/axp-list
<BR>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0032.shtml">Adam C Powell IV: "Re: stopping ./configure from choking on use of ccc/cxx (LONG)"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0030.shtml">Phil: "Re: valid boot block not present"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0025.shtml">Alan Young: "Re: stopping ./configure from choking on use of ccc/cxx"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0032.shtml">Adam C Powell IV: "Re: stopping ./configure from choking on use of ccc/cxx (LONG)"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0025.shtml">Alan Young: "Re: stopping ./configure from choking on use of ccc/cxx (LONG)"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Sat Mar  3 12:54:54 2001 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
