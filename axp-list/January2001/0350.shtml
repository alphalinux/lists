<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: /proc/PID/stat</H1> 
	
<!-- received="Wed Jan 24 17:43:23 2001" -->
<!-- isoreceived="20010125014323" -->
<!-- sent="Wed, 24 Jan 2001 12:39:45 -0500 (EST)" -->
<!-- isosent="20010124173945" -->
<!-- name="Bharadwaj Yadavalli" -->
<!-- email="sby@ives.lkg.dec.com" -->
<!-- subject="Re: /proc/PID/stat" -->
<!-- id="200101241739.MAA04474@ives.lkg.dec.com" -->
<!-- inreplyto="3A6E2BC2.E513FF26@voicenet.com" -->
<STRONG>Subject: </STRONG>Re: /proc/PID/stat<BR>
<STRONG>From: </STRONG>Bharadwaj Yadavalli (<EM>sby@ives.lkg.dec.com</EM>)<BR>
<STRONG>Date: </STRONG>Wed Jan 24 09:39:45 2001
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#350">[ date ]</A>
<A HREF="index.shtml#350">[ thread ]</A>
<A HREF="subject.shtml#350">[ subject ]</A>
<A HREF="author.shtml#350">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0351.shtml">Mike Tibor: "Re: Reiser on Raid"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0349.shtml">Grant Fleming: "Somewhat OT but I could really use a hand here."</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0340.shtml">Uncle George: "/proc/PID/stat"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0359.shtml">Uncle George: "Re: /proc/PID/stat"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0340.shtml">Bharadwaj Yadavalli: "Re: /proc/PID/stat"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;From : Uncle George &lt;gatgul@voicenet.com&gt;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date : Tue Jan 23 20:11:30 2001
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is there a pgm that will interpret all the fields that are printed by
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat /proc/PID/stat ( or statm, or any of the info on a per process basis
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
<BR>
<P>See if the following simple function and the associated structure
<BR>
that I put together sometime ago while checking out some threads-
<BR>
related stuff on Linux/Alpha is of use. Also note that the format 
<BR>
characters as given in the man page for proc are not all correct 
<BR>
on Alpha. I just when to the sources to get them right (RTFS?:-))
<BR>
<P>typedef struct statstruct_proc {
<BR>
&nbsp;&nbsp;int           pid;                      /** The process id. **/
<BR>
&nbsp;&nbsp;char          exName [_POSIX_PATH_MAX]; /** The filename of the executable **/
<BR>
&nbsp;&nbsp;char          state; /** 1 **/          /** R is running, S is sleeping, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D is sleeping in an uninterruptible wait,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Z is zombie, T is traced or stopped **/
<BR>
&nbsp;&nbsp;unsigned      euid,                      /** effective user id **/
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egid;                      /** effective group id */					     
<BR>
&nbsp;&nbsp;int           ppid;                     /** The pid of the parent. **/
<BR>
&nbsp;&nbsp;int           pgrp;                     /** The pgrp of the process. **/
<BR>
&nbsp;&nbsp;int           session;                  /** The session id of the process. **/
<BR>
&nbsp;&nbsp;int           tty;                      /** The tty the process uses **/
<BR>
&nbsp;&nbsp;int           tpgid;                    /** (too long) **/
<BR>
&nbsp;&nbsp;unsigned int	flags;                    /** The flags of the process. **/
<BR>
&nbsp;&nbsp;unsigned int	minflt;                   /** The number of minor faults **/
<BR>
&nbsp;&nbsp;unsigned int	cminflt;                  /** The number of minor faults with childs **/
<BR>
&nbsp;&nbsp;unsigned int	majflt;                   /** The number of major faults **/
<BR>
&nbsp;&nbsp;unsigned int  cmajflt;                  /** The number of major faults with childs **/
<BR>
&nbsp;&nbsp;int           utime;                    /** user mode jiffies **/
<BR>
&nbsp;&nbsp;int           stime;                    /** kernel mode jiffies **/
<BR>
&nbsp;&nbsp;int		cutime;                   /** user mode jiffies with childs **/
<BR>
&nbsp;&nbsp;int           cstime;                   /** kernel mode jiffies with childs **/
<BR>
&nbsp;&nbsp;int           counter;                  /** process's next timeslice **/
<BR>
&nbsp;&nbsp;int           priority;                 /** the standard nice value, plus fifteen **/
<BR>
&nbsp;&nbsp;unsigned int  timeout;                  /** The time in jiffies of the next timeout **/
<BR>
&nbsp;&nbsp;unsigned int  itrealvalue;              /** The time before the next SIGALRM is sent to the process **/
<BR>
&nbsp;&nbsp;int           starttime; /** 20 **/     /** Time the process started after system boot **/
<BR>
&nbsp;&nbsp;unsigned int  vsize;                    /** Virtual memory size **/
<BR>
&nbsp;&nbsp;unsigned int  rss;                      /** Resident Set Size **/
<BR>
&nbsp;&nbsp;unsigned int  rlim;                     /** Current limit in bytes on the rss **/
<BR>
&nbsp;&nbsp;unsigned int  startcode;                /** The address above which program text can run **/
<BR>
&nbsp;&nbsp;unsigned int	endcode;                  /** The address below which program text can run **/
<BR>
&nbsp;&nbsp;unsigned int  startstack;               /** The address of the start of the stack **/
<BR>
&nbsp;&nbsp;unsigned int  kstkesp;                  /** The current value of ESP **/
<BR>
&nbsp;&nbsp;unsigned int  kstkeip;                 /** The current value of EIP **/
<BR>
&nbsp;&nbsp;int		signal;                   /** The bitmap of pending signals **/
<BR>
&nbsp;&nbsp;int           blocked; /** 30 **/       /** The bitmap of blocked signals **/
<BR>
&nbsp;&nbsp;int           sigignore;                /** The bitmap of ignored signals **/
<BR>
&nbsp;&nbsp;int           sigcatch;                 /** The bitmap of catched signals **/
<BR>
&nbsp;&nbsp;unsigned int  wchan;  /** 33 **/        /** (too long) **/
<BR>
&nbsp;&nbsp;int		sched, 		  /** scheduler **/
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sched_priority;		  /** scheduler priority **/
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<BR>
} procinfo;
<BR>
<P>int get_proc_info(pid_t pid, procinfo * pinfo)
<BR>
{
<BR>
&nbsp;&nbsp;char szFileName [_POSIX_PATH_MAX],
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;szStatStr [2048],
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*s, *t;
<BR>
&nbsp;&nbsp;FILE *fp;
<BR>
&nbsp;&nbsp;struct stat st;
<BR>
&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;if (NULL == pinfo) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;errno = EINVAL;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return -1;
<BR>
&nbsp;&nbsp;}
<BR>
<P>&nbsp;&nbsp;sprintf (szFileName, &quot;/proc/%u/stat&quot;, (unsigned) pid);
<BR>
&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;if (-1 == access (szFileName, R_OK)) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return (pinfo-&gt;pid = -1);
<BR>
&nbsp;&nbsp;} /** if **/
<BR>
<P>&nbsp;&nbsp;if (-1 != stat (szFileName, &amp;st)) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pinfo-&gt;euid = st.st_uid;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pinfo-&gt;egid = st.st_gid;
<BR>
&nbsp;&nbsp;} else {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pinfo-&gt;euid = pinfo-&gt;egid = -1;
<BR>
&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;if ((fp = fopen (szFileName, &quot;r&quot;)) == NULL) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return (pinfo-&gt;pid = -1);
<BR>
&nbsp;&nbsp;} /** IF_NULL **/
<BR>
&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;if ((s = fgets (szStatStr, 2048, fp)) == NULL) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fclose (fp);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return (pinfo-&gt;pid = -1);
<BR>
&nbsp;&nbsp;}
<BR>
<P>&nbsp;&nbsp;/** pid **/
<BR>
&nbsp;&nbsp;sscanf (szStatStr, &quot;%u&quot;, &amp;(pinfo-&gt;pid));
<BR>
&nbsp;&nbsp;s = strchr (szStatStr, '(') + 1;
<BR>
&nbsp;&nbsp;t = strchr (szStatStr, ')');
<BR>
&nbsp;&nbsp;strncpy (pinfo-&gt;exName, s, t - s);
<BR>
&nbsp;&nbsp;pinfo-&gt;exName [t - s] = '\0';
<BR>
&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;sscanf (t + 2, &quot;%c %d %d %d %d %d %u %u %u %u %u %d %d %d %d %d %d %u %u %d %u %u %u %u %u %u %u %u %d %d %d %d %u&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*       1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33*/
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;state),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;ppid),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;pgrp),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;session),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;tty),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;tpgid),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;flags),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;minflt),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;cminflt),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;majflt),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;cmajflt),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;utime),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;stime),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;cutime),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;cstime),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;counter),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;priority),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;timeout),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;itrealvalue),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;starttime),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;vsize),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;rss),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;rlim),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;startcode),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;endcode),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;startstack),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;kstkesp),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;kstkeip),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;signal),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;blocked),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;sigignore),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;sigcatch),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;(pinfo-&gt;wchan));
<BR>
&nbsp;&nbsp;fclose (fp);
<BR>
&nbsp;&nbsp;return 0;
<BR>
}
<BR>
<P><P>Bharadwaj
<BR>
<P><P><P>_______________________________________________
<BR>
Axp-list mailing list
<BR>
Axp-list@redhat.com
<BR>
https://listman.redhat.com/mailman/listinfo/axp-list
<BR>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0351.shtml">Mike Tibor: "Re: Reiser on Raid"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0349.shtml">Grant Fleming: "Somewhat OT but I could really use a hand here."</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0340.shtml">Uncle George: "/proc/PID/stat"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0359.shtml">Uncle George: "Re: /proc/PID/stat"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0340.shtml">Bharadwaj Yadavalli: "Re: /proc/PID/stat"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Sat Mar  3 12:54:55 2001 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
