<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-List Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-List Archive<BR> Re: who is responsible for egcs/gcc on alpha nowadays</H1> 
	
<!-- received="Thu Oct 05 03:07:39 2000" -->
<!-- isoreceived="20001005100739" -->
<!-- sent="Wed, 04 Oct 2000 16:44:31 -0500" -->
<!-- isosent="20001004214431" -->
<!-- name="Uncle George" -->
<!-- email="gatgul@voicenet.com" -->
<!-- subject="Re: who is responsible for egcs/gcc on alpha nowadays" -->
<!-- id="39DBA4BF.EAAA8E8E@voicenet.com" -->
<!-- inreplyto="200010041549.JAA25588@ellpspace.math.ualberta.ca" -->
<STRONG>Subject: </STRONG>Re: who is responsible for egcs/gcc on alpha nowadays<BR>
<STRONG>From: </STRONG>Uncle George (<EM>gatgul@voicenet.com</EM>)<BR>
<STRONG>Date: </STRONG>Wed Oct  4 14:44:31 2000
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#46">[ date ]</A>
<A HREF="index.shtml#46">[ thread ]</A>
<A HREF="subject.shtml#46">[ subject ]</A>
<A HREF="author.shtml#46">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0047.shtml">Michal Jaegermann: "Re: Ruffian 64bit pci ?"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0045.shtml">Uncle George: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0040.shtml">Michal Jaegermann: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0041.shtml">Nathan Paul Simons: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0040.shtml">Uncle George: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
Ok, now got a simple sample. it seems that using -O2 causes the frame pointer
<BR>
to be off.
<BR>
compile with
<BR>
gcc -O2 -g   tstparm.c tstparm2.c
<BR>
<P>using &quot;gdb a.out&quot;  u can either step trace  ( display/i $pc  &amp; then si ), or
<BR>
just &quot;r&quot; and  show the back trace
<BR>
a -02 build has this back trace. the variable lineAddr should have
<BR>
0x1000000007 in it
<BR>
<P>===========================================================
<BR>
$ gdb a.out
<BR>
GNU gdb 19991004
<BR>
Copyright 1998 Free Software Foundation, Inc.
<BR>
GDB is free software, covered by the GNU General Public License, and you are
<BR>
welcome to change it and/or distribute copies of it under certain conditions.
<BR>
<P>Type &quot;show copying&quot; to see the conditions.
<BR>
There is absolutely no warranty for GDB.  Type &quot;show warranty&quot; for details.
<BR>
This GDB was configured as &quot;alpha-redhat-linux&quot;...
<BR>
(gdb) r
<BR>
Starting program: /gat/alinux-java/build/solaris/a.out
<BR>
<P>Program received signal SIGSEGV, Segmentation fault.
<BR>
foo_4ch_bl (leftEdges=0x1000000001, rightEdges=0x1000000002,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;xStarts=0x1000000003, yStarts=0x1000000004, sides=0x1000000005,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dstData=0x200003a5408 &quot; h\025&quot;, lineAddr=0x200003aaa48, dstYStride=1,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;srcYStride=1299556) at /tmp/tstparm2.c:35
<BR>
35  foo_s32  yFinish = sides[1];
<BR>
(gdb) where
<BR>
#0  foo_4ch_bl (leftEdges=0x1000000001, rightEdges=0x1000000002,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;xStarts=0x1000000003, yStarts=0x1000000004, sides=0x1000000005,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dstData=0x200003a5408 &quot; h\025&quot;, lineAddr=0x200003aaa48, dstYStride=1,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;srcYStride=1299556) at /tmp/tstparm2.c:35
<BR>
#1  0x12000044c in main () at /tmp/tstparm.c:37
<BR>
<P>=====================================================================
<BR>
and gcc  -O1 -g produces this
<BR>
======================================================================
<BR>
<P>gdb a.out
<BR>
GNU gdb 19991004
<BR>
Copyright 1998 Free Software Foundation, Inc.
<BR>
GDB is free software, covered by the GNU General Public License, and you are
<BR>
welcome to change it and/or distribute copies of it under certain conditions.
<BR>
<P>Type &quot;show copying&quot; to see the conditions.
<BR>
There is absolutely no warranty for GDB.  Type &quot;show warranty&quot; for details.
<BR>
This GDB was configured as &quot;alpha-redhat-linux&quot;...
<BR>
(gdb) r
<BR>
Starting program: /gat/alinux-java/build/solaris/a.out
<BR>
<P>Program received signal SIGSEGV, Segmentation fault.
<BR>
foo_4ch_bl (leftEdges=0x1000000001, rightEdges=0x1000000002,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;xStarts=0x1000000003, yStarts=0x1000000004, sides=0x1000000005,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dstData=0x1000000006 &lt;Address 0x1000000006 out of bounds&gt;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;lineAddr=0x1000000007, dstYStride=268435464, srcYStride=268435465)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;at /tmp/tstparm2.c:35
<BR>
35  foo_s32  yFinish = sides[1];
<BR>
<P><P>Michal Jaegermann wrote:
<BR>
<P><EM>&gt; Uncle George wrote:
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; It seems like the egcs compiler in redhat/6.2 is producing bad stack
</EM><BR>
<EM>&gt; &gt; addressing. In my case it appears to be off by 16 bytes, and fetches the
</EM><BR>
<EM>&gt; &gt; 7th arg from the wrong place( short by 16 bytes in fact ).
</EM><BR>
<EM>&gt;
</EM><BR>
<EM>&gt; I, for one, would be really interested in seeing a sample code which
</EM><BR>
<EM>&gt; would demonstrate that.  I have seen in the past wrong offsets but they
</EM><BR>
<EM>&gt; were results of bugs in sources.
</EM><BR>
<P><P>
typedef signed char        foo_s8;
<BR>
typedef unsigned char      foo_u8;
<BR>
typedef short              foo_s16;
<BR>
typedef unsigned short     foo_u16;
<BR>
typedef int                foo_s32;
<BR>
typedef unsigned int       foo_u32;
<BR>
typedef float              foo_f32;
<BR>
typedef double             foo_d64;
<BR>
<P><P><P>typedef long long          foo_s64;
<BR>
typedef unsigned long long foo_u64;
<BR>
<P>foo_f32 foo_t_u8[7],
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_t_bc[7],
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_t_s16f_bc[7];
<BR>
<P><P>foo_f32 foo_t_u8[7];
<BR>
foo_f32 foo_t_Q8[7];
<BR>
<P>main()
<BR>
{
<BR>
<P>&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_s32 *leftEdges = 0x1000000001; 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_s32 *rightEdges = 0x1000000002;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_s32 *xStarts = 0x1000000003;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_s32 *yStarts = 0x1000000004;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_s32 *sides = 0x1000000005;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_u8 *dstData  = 0x1000000006;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_u8  **lineAddr = 0x1000000007;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_s32 dstYStride   = 0x10000008;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_s32 srcYStride =   0x10000009;
<BR>
<P>foo_4ch_bl(leftEdges, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rightEdges, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xStarts,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yStarts,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sides,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dstData, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineAddr,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dstYStride , 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcYStride );
<BR>
<P>}
<BR>
<P><P><P>
typedef signed char        foo_s8;
<BR>
typedef unsigned char      foo_u8;
<BR>
typedef short              foo_s16;
<BR>
typedef unsigned short     foo_u16;
<BR>
typedef int                foo_s32;
<BR>
typedef unsigned int       foo_u32;
<BR>
typedef float              foo_f32;
<BR>
typedef double             foo_d64;
<BR>
<P><P><P>typedef long long          foo_s64;
<BR>
typedef unsigned long long foo_u64;
<BR>
typedef unsigned long      foo_addr;
<BR>
<P>extern const foo_f32 foo_t_u8[],
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_t_u8f[],
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foo_t_s16f[];
<BR>
extern const foo_f32 foo_t_u8[];
<BR>
extern const foo_f32 foo_t_Q8[];
<BR>
<P>void foo_4ch_bl(foo_s32 *leftEdges,
<BR>
&nbsp;foo_s32 *rightEdges,
<BR>
&nbsp;foo_s32 *xStarts,
<BR>
&nbsp;foo_s32 *yStarts,
<BR>
&nbsp;foo_s32 *sides,
<BR>
&nbsp;foo_u8  *dstData,
<BR>
&nbsp;foo_u8  **lineAddr,
<BR>
&nbsp;foo_s32 dstYStride ,
<BR>
&nbsp;foo_s32 srcYStride )
<BR>
{
<BR>
&nbsp;&nbsp;foo_s32  xLeft, xRight, X, Y;
<BR>
&nbsp;foo_s32  xSrc, ySrc;
<BR>
&nbsp;foo_s32  yStart = sides[0];
<BR>
&nbsp;foo_s32  yFinish = sides[1];
<BR>
&nbsp;foo_s32  dX = sides[2];
<BR>
&nbsp;foo_s32  dY = sides[3];
<BR>
&nbsp;foo_u8  *srcPixelPtr;
<BR>
&nbsp;foo_u8  *dstPixelPtr;
<BR>
&nbsp;foo_u8  *dstLineEnd;
<BR>
&nbsp;foo_s32  j; 
<BR>
&nbsp;&nbsp;foo_u8  *srcPixelPtr2;
<BR>
<P>&nbsp;&nbsp;for (j = yStart; j &lt;= yFinish; j++) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  fdx, fdy;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  a00_0, a01_0, a10_0, a11_0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  a00_1, a01_1, a10_1, a11_1;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  a00_2, a01_2, a10_2, a11_2;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  a00_3, a01_3, a10_3, a11_3;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  pix0_0, pix1_0, res0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  pix0_1, pix1_1, res1;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  pix0_2, pix1_2, res2;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;foo_f32  pix0_3, pix1_3, res3;
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;dstData += dstYStride;
<BR>
&nbsp;xLeft = leftEdges[j];
<BR>
&nbsp;xRight = rightEdges[j];
<BR>
&nbsp;X = xStarts[j];
<BR>
&nbsp;Y = yStarts[j];
<BR>
&nbsp;if (xLeft &gt; xRight) continue;
<BR>
&nbsp;dstPixelPtr  = (foo_u8 *)dstData +  4  * xLeft;
<BR>
&nbsp;dstLineEnd   = (foo_u8 *)dstData +  4  * xRight; 
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;fdx = foo_t_Q8[(X &gt;&gt; 8) &amp; 0xFF];
<BR>
&nbsp;fdy = foo_t_Q8[(Y &gt;&gt; 8) &amp; 0xFF];
<BR>
&nbsp;ySrc = ( Y  &gt;&gt; (16 -3)) &amp;~ 7 ;
<BR>
&nbsp;&nbsp;Y += dY;
<BR>
&nbsp;xSrc = X&gt;&gt; 16 ;
<BR>
&nbsp;&nbsp;X += dX;
<BR>
&nbsp;srcPixelPtr = (*(foo_u8  **)((foo_addr) lineAddr  +   ySrc ))  +  4  * xSrc;
<BR>
&nbsp;srcPixelPtr2 = (foo_u8  *)((foo_u8 *)srcPixelPtr + srcYStride); 
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;a00_0  = foo_t_u8[srcPixelPtr[  0 ]];
<BR>
&nbsp;a01_0  = foo_t_u8[srcPixelPtr[  4 ]];
<BR>
&nbsp;a10_0  = foo_t_u8[srcPixelPtr2[  0 ]];
<BR>
&nbsp;a11_0  = foo_t_u8[srcPixelPtr2[  4 ]]; 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;a00_1  = foo_t_u8[srcPixelPtr[  1 ]];
<BR>
&nbsp;a01_1  = foo_t_u8[srcPixelPtr[  5 ]];
<BR>
&nbsp;a10_1  = foo_t_u8[srcPixelPtr2[  1 ]];
<BR>
&nbsp;a11_1  = foo_t_u8[srcPixelPtr2[  5 ]];
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;a00_2  = foo_t_u8[srcPixelPtr[  2 ]];
<BR>
&nbsp;a01_2  = foo_t_u8[srcPixelPtr[  6 ]];
<BR>
&nbsp;a10_2  = foo_t_u8[srcPixelPtr2[  2 ]];
<BR>
&nbsp;a11_2  = foo_t_u8[srcPixelPtr2[  6 ]];
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;a00_3  = foo_t_u8[srcPixelPtr[  3 ]];
<BR>
&nbsp;a01_3  = foo_t_u8[srcPixelPtr[  7 ]];
<BR>
&nbsp;a10_3  = foo_t_u8[srcPixelPtr2[  3 ]];
<BR>
&nbsp;a11_3  = foo_t_u8[srcPixelPtr2[  7 ]];
<BR>
&nbsp;
<BR>
<P><P><P><P>&nbsp;&nbsp;&nbsp;&nbsp;for (;dstPixelPtr &lt; dstLineEnd; dstPixelPtr+=4) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pix0_0  = a00_0  + fdy * (a10_0  - a00_0 );
<BR>
&nbsp;pix1_0  = a01_0  + fdy * (a11_0  - a01_0 );
<BR>
&nbsp;res0  = pix0_0  + fdx * (pix1_0  - pix0_0 );
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pix0_1  = a00_1  + fdy * (a10_1  - a00_1 );
<BR>
&nbsp;pix1_1  = a01_1  + fdy * (a11_1  - a01_1 );
<BR>
&nbsp;res1  = pix0_1  + fdx * (pix1_1  - pix0_1 );
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pix0_2  = a00_2  + fdy * (a10_2  - a00_2 );
<BR>
&nbsp;pix1_2  = a01_2  + fdy * (a11_2  - a01_2 );
<BR>
&nbsp;res2  = pix0_2  + fdx * (pix1_2  - pix0_2 );
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pix0_3  = a00_3  + fdy * (a10_3  - a00_3 );
<BR>
&nbsp;pix1_3  = a01_3  + fdy * (a11_3  - a01_3 );
<BR>
&nbsp;res3  = pix0_3  + fdx * (pix1_3  - pix0_3 );
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fdx = foo_t_Q8[(X &gt;&gt; 8) &amp; 0xFF];
<BR>
&nbsp;fdy = foo_t_Q8[(Y &gt;&gt; 8) &amp; 0xFF];
<BR>
&nbsp;ySrc = ( Y  &gt;&gt; (16 -3)) &amp;~ 7 ;
<BR>
&nbsp;&nbsp;Y += dY;
<BR>
&nbsp;xSrc = X&gt;&gt; 16 ;
<BR>
&nbsp;&nbsp;X += dX;
<BR>
&nbsp;srcPixelPtr = (*(foo_u8  **)((foo_addr) lineAddr  +   ySrc ))  +  4  * xSrc;
<BR>
&nbsp;srcPixelPtr2 = (foo_u8  *)((foo_u8 *)srcPixelPtr + srcYStride);
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a00_0  = foo_t_u8[srcPixelPtr[  0 ]];
<BR>
&nbsp;a01_0  = foo_t_u8[srcPixelPtr[  4 ]];
<BR>
&nbsp;a10_0  = foo_t_u8[srcPixelPtr2[  0 ]];
<BR>
&nbsp;a11_0  = foo_t_u8[srcPixelPtr2[  4 ]];
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a00_1  = foo_t_u8[srcPixelPtr[  1 ]];
<BR>
&nbsp;a01_1  = foo_t_u8[srcPixelPtr[  5 ]];
<BR>
&nbsp;a10_1  = foo_t_u8[srcPixelPtr2[  1 ]];
<BR>
&nbsp;a11_1  = foo_t_u8[srcPixelPtr2[  5 ]];
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a00_2  = foo_t_u8[srcPixelPtr[  2 ]];
<BR>
&nbsp;a01_2  = foo_t_u8[srcPixelPtr[  6 ]];
<BR>
&nbsp;a10_2  = foo_t_u8[srcPixelPtr2[  2 ]];
<BR>
&nbsp;a11_2  = foo_t_u8[srcPixelPtr2[  6 ]];
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a00_3  = foo_t_u8[srcPixelPtr[  3 ]];
<BR>
&nbsp;a01_3  = foo_t_u8[srcPixelPtr[  7 ]];
<BR>
&nbsp;a10_3  = foo_t_u8[srcPixelPtr2[  3 ]];
<BR>
&nbsp;a11_3  = foo_t_u8[srcPixelPtr2[  7 ]];
<BR>
&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dstPixelPtr[0] = res0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dstPixelPtr[1] = res1;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dstPixelPtr[2] = res2;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dstPixelPtr[3] = res3;
<BR>
<P>&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;}
<BR>
}
<BR>
<P>
<P><P><P><P>_______________________________________________
<BR>
Axp-list mailing list
<BR>
Axp-list@redhat.com
<BR>
https://listman.redhat.com/mailman/listinfo/axp-list
<BR>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0047.shtml">Michal Jaegermann: "Re: Ruffian 64bit pci ?"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0045.shtml">Uncle George: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0040.shtml">Michal Jaegermann: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<!-- nextthread="start" -->
<LI><STRONG>Next in thread:</STRONG> <A HREF="0041.shtml">Nathan Paul Simons: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<LI><STRONG>Reply:</STRONG> <A HREF="0040.shtml">Uncle George: "Re: who is responsible for egcs/gcc on alpha nowadays"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Thu Nov  2 08:06:26 2000 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
