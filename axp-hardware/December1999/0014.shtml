<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"> 
     <HTML> 
     <HEAD> 
     <TITLE>Axp-Hardware Archive</TITLE> 
     <LINK REV="made" HREF="mailto:mailto-address"> 
     <HEAD> 
     <BODY BGCOLOR="#DC9D33" TEXT="#000000" LINK="#DD0000" ALINK="#CC0000" VLINK="#CC0000">
		<CENTER>  <!--#exec cgi="/cgi-bin/banmat1.cgi"--></CENTER>

     <H1 ALIGN=CENTER>Axp-Hardware Archive<BR> Re: EV56 and FPU (long)</H1> 
	
<!-- received="Wed Dec 15 23:30:56 1999" -->
<!-- isoreceived="19991216073056" -->
<!-- sent="Wed, 15 Dec 1999 19:38:24 +0100" -->
<!-- isosent="19991215183824" -->
<!-- name="José Javier Zarate" -->
<!-- email="jzarate@unav.es" -->
<!-- subject="Re: EV56 and FPU (long)" -->
<!-- id="3857E020.FF66E1E7@unav.es" -->
<!-- inreplyto="Pine.OSF.3.96.991215133437.8584K-100000@perf.zko.dec.com" -->
<STRONG>Subject: </STRONG>Re: EV56 and FPU (long)<BR>
<STRONG>From: </STRONG>José Javier Zarate (<EM>jzarate@unav.es</EM>)<BR>
<STRONG>Date: </STRONG>Wed Dec 15 10:38:24 1999
<P>
<UL>
<LI><STRONG>Messages sorted by:</STRONG> 
<A HREF="date.shtml#14">[ date ]</A>
<A HREF="index.shtml#14">[ thread ]</A>
<A HREF="subject.shtml#14">[ subject ]</A>
<A HREF="author.shtml#14">[ author ]</A>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0015.shtml">Prophete J. Charles: "(no subject)"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0013.shtml">Phillip Ezolt: "Re: EV56 and FPU (long)"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0013.shtml">Phillip Ezolt: "Re: EV56 and FPU (long)"</A>
<!-- nextthread="start" -->
<LI><STRONG>Reply:</STRONG> <A HREF="0013.shtml">José Javier Zarate: "Re: EV56 and FPU (long)"</A>
<!-- reply="end" -->
</UL>
<HR>
<!-- body="start" -->
<P>
Excuse me all, I have failed to tell you that I am using both g77 and
<BR>
Compaq Fortran, having had more success with the second, at least until
<BR>
now.
<BR>
<P>Phillip Ezolt wrote:
<BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; Jose,
</EM><BR>
<EM>&gt;         You really DON'T want to be using the GNU fortran compiler.
</EM><BR>
<EM>&gt; Use the compaq fortran compiler at <A HREF="http://www.digital.com/fortran/linux/">http://www.digital.com/fortran/linux/</A>
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; Cheers,
</EM><BR>
<EM>&gt; --Phil
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; Compaq:  High Performance Server Division/Benchmark Performance Engineering
</EM><BR>
<EM>&gt; ---------------- Alpha, The Fastest Processor on Earth --------------------
</EM><BR>
<EM>&gt; Phillip.Ezolt@compaq.com        |C|O|M|P|A|Q|        ezolt@perf.zko.dec.com
</EM><BR>
<EM>&gt; ------------------- See the results at www.spec.org -----------------------
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; On Wed, 15 Dec 1999, [iso-8859-1] José Javier Zarate wrote:
</EM><BR>
<EM>&gt; 
</EM><BR>
<EM>&gt; &gt; Dear all
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; I am not sure if this are the right lists so if you know better places
</EM><BR>
<EM>&gt; &gt; to ask please let me know. Excuse also the cross posting but I am
</EM><BR>
<EM>&gt; &gt; desperate.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Not my english language skills neither my programming skills are very
</EM><BR>
<EM>&gt; &gt; good so please excuse my possible manifestations of ignorance.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; I am using a computer with EV56 microprocessor 633 MHz, API 164UX 2 MB
</EM><BR>
<EM>&gt; &gt; cache motherboard, 256 MB RAM and OS RedHat 6.0, kernel 2.2.5-16.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Well, the question is that I am trying to make run a pharmacokinetic
</EM><BR>
<EM>&gt; &gt; modelling program under Alpha/Linux.
</EM><BR>
<EM>&gt; &gt; The program comes as general Fortran code that you have to compile.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Well, the first question is that since I installed
</EM><BR>
<EM>&gt; &gt; For setting up the program I should know some values referring to the
</EM><BR>
<EM>&gt; &gt; FPU characteristics. I will cite quoted from the installation manual:
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; &quot;REPS  Machine precision. The smallest floating point number
</EM><BR>
<EM>&gt; &gt; representable
</EM><BR>
<EM>&gt; &gt; in the machine such that when added to 1 the result sum is not 1.
</EM><BR>
<EM>&gt; &gt; TOL  Machine tolerance. The smallest floating point number representable
</EM><BR>
<EM>&gt; &gt; in the machine divided by machine precision.
</EM><BR>
<EM>&gt; &gt; LARGE  Machine infinity. This is the largest floating point number
</EM><BR>
<EM>&gt; &gt; representable in the machine.
</EM><BR>
<EM>&gt; &gt; EPS  Mantissa lenght. This is the number 2**(-m), where m is the number
</EM><BR>
<EM>&gt; &gt; of binary digits occurring in the floating point mantissa.
</EM><BR>
<EM>&gt; &gt; SREPS  Same as REPS but always single precision.
</EM><BR>
<EM>&gt; &gt; STOL  Same as TOL but always single precision.
</EM><BR>
<EM>&gt; &gt; In single precision NONMEM, these six nunmbers are represented as
</EM><BR>
<EM>&gt; &gt; integer values in the integer variables IREPS, ITOL, LARGE, IEPS,
</EM><BR>
<EM>&gt; &gt; ISREPS, ISTOL.
</EM><BR>
<EM>&gt; &gt; In double precision NONMEM, double precision versions of REPS, TOL, and
</EM><BR>
<EM>&gt; &gt; LARGE are plced as pairs of integr values in two-dimensional integer
</EM><BR>
<EM>&gt; &gt; arrays IREPS, ITOL and LARGE. Single precision versions of EPS, ISREPS
</EM><BR>
<EM>&gt; &gt; and ISTOL.
</EM><BR>
<EM>&gt; &gt; The integer values in BLKDAT (a subroutine of the program) are made
</EM><BR>
<EM>&gt; &gt; equivalent via FORTRAN EQUIVALENCE statements to floating point
</EM><BR>
<EM>&gt; &gt; variables of the appropiate precisions.&quot;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Double precision values are:
</EM><BR>
<EM>&gt; &gt; &quot;
</EM><BR>
<EM>&gt; &gt; *     IEEE CONSTANTS
</EM><BR>
<EM>&gt; &gt; *
</EM><BR>
<EM>&gt; &gt; C     DATA IREPS,ITOL,LARGE,IEPS/1018167296,0,55574528,0,
</EM><BR>
<EM>&gt; &gt; C    1                          2146435071,-1,864026624/
</EM><BR>
<EM>&gt; &gt; C     DATA ISREPS,ISTOL/872415232,201326592/
</EM><BR>
<EM>&gt; &gt; *
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; *
</EM><BR>
<EM>&gt; &gt; *     INTEL CHIP CONSTANTS
</EM><BR>
<EM>&gt; &gt; *
</EM><BR>
<EM>&gt; &gt;       DATA IREPS,ITOL,LARGE,IEPS/0,1018167296,0,55574528,
</EM><BR>
<EM>&gt; &gt;      1                          -1,2146435071,864026624/
</EM><BR>
<EM>&gt; &gt;       DATA ISREPS,ISTOL/872415232,201326592/
</EM><BR>
<EM>&gt; &gt; &quot;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Single precision values are:
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; &quot;
</EM><BR>
<EM>&gt; &gt; *     IEEE CONSTANTS
</EM><BR>
<EM>&gt; &gt; *
</EM><BR>
<EM>&gt; &gt; C     DATA IREPS,ITOL,LARGE,IEPS/872415232,201326592,
</EM><BR>
<EM>&gt; &gt; C    1                          2139095039,864026624/
</EM><BR>
<EM>&gt; &gt; C     DATA ISREPS,ISTOL/872415232,201326592/
</EM><BR>
<EM>&gt; &gt; *
</EM><BR>
<EM>&gt; &gt; &quot;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; I have used Intel and IEEE values but this appears to cause errors
</EM><BR>
<EM>&gt; &gt; during
</EM><BR>
<EM>&gt; &gt; execution (in test runs I get floating point exceptions) unless I
</EM><BR>
<EM>&gt; &gt; compile without optimization. Intel values allow any kind of options
</EM><BR>
<EM>&gt; &gt; when compiling.
</EM><BR>
<EM>&gt; &gt; So, could any of you know those values for my microprocessor or where to
</EM><BR>
<EM>&gt; &gt; find them? I will try to give you more information as soon as I can find
</EM><BR>
<EM>&gt; &gt; it.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; When comparing the time it needs for some problems with the same time
</EM><BR>
<EM>&gt; &gt; from a PIII 450 MHz it simply trounces the Alpha in some kind of
</EM><BR>
<EM>&gt; &gt; problems (by a factor of two), while resolving some other problems
</EM><BR>
<EM>&gt; &gt; result in the Alpha outperforming the PIII by a factor or two. I am
</EM><BR>
<EM>&gt; &gt; really lost.
</EM><BR>
<EM>&gt; &gt; Are there any benckmarking utilities available that allow me to check if
</EM><BR>
<EM>&gt; &gt; the machine is running properly? Or any simple way to check if
</EM><BR>
<EM>&gt; &gt; everything is working properly?
</EM><BR>
<EM>&gt; &gt; Could any of you have some Fortran program that I could compile and
</EM><BR>
<EM>&gt; &gt; check the time it needs to execute?
</EM><BR>
<EM>&gt; &gt; Are there any mods I could perform to improve the computer performance?
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; As someone appears to be using the same compilers as I do, would it be
</EM><BR>
<EM>&gt; &gt; possible to know what the program is doing (wich subroutines it is using
</EM><BR>
<EM>&gt; &gt; during a givwen run an d how much time is it taking). Back to my times
</EM><BR>
<EM>&gt; &gt; of BASIC (sorry) and Pascal you could do it and see wich lines of code
</EM><BR>
<EM>&gt; &gt; were being executed. Being a program used for clinical purposes I cannot
</EM><BR>
<EM>&gt; &gt; modify the source code without previous agreement of the makes but I
</EM><BR>
<EM>&gt; &gt; think that I could apply different optimizations to different
</EM><BR>
<EM>&gt; &gt; subroutines, as I have seen that applying different optimization levels
</EM><BR>
<EM>&gt; &gt; to the whole lot appear to change favourably the performance on some
</EM><BR>
<EM>&gt; &gt; problems and degrade it on some others. Any clues would be very welcome.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; When installing the program I have also the choice of using single or
</EM><BR>
<EM>&gt; &gt; double precision installation.
</EM><BR>
<EM>&gt; &gt; Quoting again:
</EM><BR>
<EM>&gt; &gt; &quot;Some scientific workstations are described as having &quot;64 bit
</EM><BR>
<EM>&gt; &gt; architecture&quot;. This tipically describes the width of the data bus, not
</EM><BR>
<EM>&gt; &gt; the size of the floating point word, wich is 32 bits. Double precison is
</EM><BR>
<EM>&gt; &gt; recommended for such machines.&quot;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Supposing that the ability of having 64 bit long word allows the
</EM><BR>
<EM>&gt; &gt; microprocessor to work with longer than standard single precision
</EM><BR>
<EM>&gt; &gt; values so that I could install Single precision version without losing
</EM><BR>
<EM>&gt; &gt; quality in the results and improving speed. Or, if someone knows enough
</EM><BR>
<EM>&gt; &gt; about the architecture of the processor and how to do it, I could try to
</EM><BR>
<EM>&gt; &gt; do what Intel Pentium (and next) do, perform various tasks in parallel.
</EM><BR>
<EM>&gt; &gt; Any of those tricks would be very useful. If somebody knows how to
</EM><BR>
<EM>&gt; &gt; convince the compiler for having such behaviour I would be very grateful
</EM><BR>
<EM>&gt; &gt; if he or sehe could share his knowledge.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; I have tried to overclock from 633 to 667 but since I did I get
</EM><BR>
<EM>&gt; &gt; f77: Internal compiler error: program f771 got fatal signal 11
</EM><BR>
<EM>&gt; &gt; when compiling large sets of *.f files.
</EM><BR>
<EM>&gt; &gt; After getting back to 633 everything seems to be normal again.
</EM><BR>
<EM>&gt; &gt; Any clues about overclocking? I thoght that 5% overclocking wasn't shuch
</EM><BR>
<EM>&gt; &gt; a big deal.
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Finally, floating point exception handling.
</EM><BR>
<EM>&gt; &gt; Ther are various ways to do this in different architectures and OSs, I
</EM><BR>
<EM>&gt; &gt; need that the program terminates in case of FP exception unless is
</EM><BR>
<EM>&gt; &gt; underflow where is considered safe to set the value to zero. Under
</EM><BR>
<EM>&gt; &gt; Compaq fortran compiler it appears to be done by the option fpe at
</EM><BR>
<EM>&gt; &gt; different levels but I am not sure neither know what is gradual
</EM><BR>
<EM>&gt; &gt; underflow (something proposed in the online manual as an alternative to
</EM><BR>
<EM>&gt; &gt; setting the number to zero).
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; Thanks all and happy Christmas
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; --
</EM><BR>
<EM>&gt; &gt; JJ Zarate
</EM><BR>
<EM>&gt; &gt; Departamento de Farmacia y Tecnologia Farmaceutica
</EM><BR>
<EM>&gt; &gt; <A HREF="http://www.unav.es/farmacia/dptos/farmytec/index.htm">http://www.unav.es/farmacia/dptos/farmytec/index.htm</A>
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt; --
</EM><BR>
<EM>&gt; &gt; To unsubscribe: send e-mail to axp-list-request@redhat.com with
</EM><BR>
<EM>&gt; &gt; 'unsubscribe' as the subject.  Do not send it to axp-list@redhat.com
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<EM>&gt; &gt;
</EM><BR>
<P><PRE>
-- 
JJ Zarate
Departamento de Farmacia y Tecnologia Farmaceutica
<A HREF="http://www.unav.es/farmacia/dptos/farmytec/index.htm">http://www.unav.es/farmacia/dptos/farmytec/index.htm</A>
</PRE>
<P><!-- body="end" -->
<HR>
<P>
<UL>
<!-- next="start" -->
<LI><STRONG>Next message:</STRONG> <A HREF="0015.shtml">Prophete J. Charles: "(no subject)"</A>
<LI><STRONG>Previous message:</STRONG> <A HREF="0013.shtml">Phillip Ezolt: "Re: EV56 and FPU (long)"</A>
<LI><STRONG>In reply to:</STRONG> <A HREF="0013.shtml">Phillip Ezolt: "Re: EV56 and FPU (long)"</A>
<!-- nextthread="start" -->
<LI><STRONG>Reply:</STRONG> <A HREF="0013.shtml">José Javier Zarate: "Re: EV56 and FPU (long)"</A>
<!-- reply="end" -->
</UL>
<!-- trailer="footer" -->
<HR> 
     <P> 
     <SMALL> 
     <EM> 
     This archive was generated by  <A HREF="http://www.landfield.com/hypermail">hypermail version 2a22 </A> on Mon Jan  3 11:15:07 2000 PST <BR>
	Send any problems or questions about this archive to <A HREF="mailto:webmaster@alphalinux.org">webmaster@alphalinux.org</A>. 
     </EM> 
     </SMALL> 
     </BODY> 
     </HTML> 
